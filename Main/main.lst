   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.global	settings
  11              		.section	.rodata
  12              		.align	2
  15              	settings:
  16 0000 53657474 		.ascii	"Settings:\000"
  16      696E6773 
  16      3A00
  17              		.global	radio_channel_menu
  18 000a 0000     		.align	2
  21              	radio_channel_menu:
  22 000c 52616469 		.ascii	"Radio Channel"
  22      6F204368 
  22      616E6E65 
  22      6C
  23              		.global	radio_power
  24 0019 000000   		.align	2
  27              	radio_power:
  28 001c 52616469 		.ascii	"Radio Power"
  28      6F20506F 
  28      776572
  29              		.global	contrast
  30 0027 00       		.align	2
  33              	contrast:
  34 0028 436F6E74 		.ascii	"Contrast\000"
  34      72617374 
  34      00
  35              		.global	volume
  36 0031 000000   		.align	2
  39              	volume:
  40 0034 416D706C 		.ascii	"Amplitude\000"
  40      69747564 
  40      6500
  41              		.global	newline
  42 003e 0000     		.align	2
  45              	newline:
  46 0040 0A00     		.ascii	"\012\000"
  47              		.global	USB
  48 0042 0000     		.align	2
  51              	USB:
  52 0044 55534220 		.ascii	"USB Connected!"
  52      436F6E6E 
  52      65637465 
  52      6421
  53              		.global	NotFound
  54 0052 0000     		.align	2
  57              	NotFound:
  58 0054 46696C65 		.ascii	"File Not Found!"
  58      204E6F74 
  58      20466F75 
  58      6E6421
  59              		.global	welcome
  60 0063 00       		.align	2
  63              	welcome:
  64 0064 74656368 		.ascii	"technomage musicbox:\012\015"
  64      6E6F6D61 
  64      6765206D 
  64      75736963 
  64      626F783A 
  65              		.global	radio_enable
  66 007a 0000     		.bss
  69              	radio_enable:
  70 0000 00       		.space	1
  71              		.global	radio_channel
  72              		.data
  73              		.align	2
  76              	radio_channel:
  77 0000 CD030000 		.word	973
  78              		.global	volume_setting
  79              		.align	2
  82              	volume_setting:
  83 0004 10000000 		.word	16
  84              		.bss
  85              	song_is_over:
  86 0001 00       		.space	1
  87              	file_is_open:
  88 0002 00       		.space	1
  89 0003 00       		.align	2
  90              	NUMBEROFFILES:
  91 0004 00000000 		.space	4
  92              		.text
  93              		.align	2
  94              		.global	delay_ms
  96              	delay_ms:
  97              	.LFB3:
  98              		.file 1 "main.c"
   1:main.c        **** //*******************************************************
   2:main.c        **** //					MP3 Development Platform
   3:main.c        **** //*******************************************************
   4:main.c        **** //#include <stdio.h>
   5:main.c        **** #include "LPC214x.h"
   6:main.c        **** #include "setup.h"
   7:main.c        **** #include "MP3Dev.h"
   8:main.c        **** #include "serial.h"
   9:main.c        **** #include "rprintf.h"
  10:main.c        **** 
  11:main.c        **** //*******************************************************
  12:main.c        **** //				Memory Management Libraries
  13:main.c        **** //*******************************************************
  14:main.c        **** #include "rootdir.h"
  15:main.c        **** #include "sd_raw.h"
  16:main.c        **** #include "fat16.h"
  17:main.c        **** 
  18:main.c        **** //*******************************************************
  19:main.c        **** //				USB Libraries
  20:main.c        **** //*******************************************************
  21:main.c        **** #include "../Bootloader/LPCUSB/main_msc.h"
  22:main.c        **** 
  23:main.c        **** //*******************************************************
  24:main.c        **** //					External Component Libs
  25:main.c        **** //*******************************************************
  26:main.c        **** #include "../lib/LCD_driver.h"
  27:main.c        **** #include "../lib/MMA7260.h"
  28:main.c        **** #include "../lib/vs1002.h"
  29:main.c        **** #include "../lib/NS73.h"
  30:main.c        **** 
  31:main.c        **** //*******************************************************
  32:main.c        **** //					Interrupt Functions
  33:main.c        **** //*******************************************************
  34:main.c        **** 
  35:main.c        **** static void timer0ISR(void);
  36:main.c        **** static void timer1ISR(void);
  37:main.c        **** 
  38:main.c        **** 
  39:main.c        **** //*******************************************************
  40:main.c        **** //					External Variables
  41:main.c        **** //*******************************************************
  42:main.c        **** extern char white;	//Color "White" used in LCD Functions(From LCD_driver.h)
  43:main.c        **** extern char black;	//Color "black" used in LCD Functions(From LCD_driver.h)
  44:main.c        **** extern char red;	//Color	"red" used in LCD Functions(From LCD_driver.h)
  45:main.c        **** extern char green;  
  46:main.c        **** //*******************************************************
  47:main.c        **** //				Global Variables for Main
  48:main.c        **** //*******************************************************
  49:main.c        **** static char button_pressed;				//Holds the button value of the Nav. Switch.  Updated in the Timer 1
  50:main.c        **** static char update_screen;				//Flag which indicates if screen has been rotated.
  51:main.c        **** static int prev_position;				//Accelerometer Value placeholder
  52:main.c        **** static int cur_position;				//Accelerometer Value placeholder
  53:main.c        **** static char file_is_open=0;				//Global Flag indicating if a file is currently open
  54:main.c        **** static char song_is_over=0;				//Global Flag indicating if the current song has finished playing
  55:main.c        **** 
  56:main.c        **** static SongStruct current_song;			//Holds information related to the currently selected song
  57:main.c        **** static DisplayStruct file_manager;		//Main menu display which contains list of MP3's on SD card
  58:main.c        **** static DisplayStruct settings_menu;		//Settings Menu...
  59:main.c        **** static DisplayStruct *current_display;	//
  60:main.c        **** static int NUMBEROFFILES=0;
  61:main.c        **** 
  62:main.c        **** int volume_setting=16, radio_channel=973;
  63:main.c        **** char radio_enable=OFF;
  64:main.c        **** 
  65:main.c        **** //*******************************************************
  66:main.c        **** //					Display Strings
  67:main.c        **** //*******************************************************
  68:main.c        **** const char welcome[22]="technomage musicbox:\n\r";
  69:main.c        **** const char NotFound[15]="File Not Found!";
  70:main.c        **** const char USB[14]="USB Connected!";
  71:main.c        **** const char newline[2] = "\n";
  72:main.c        **** const char volume[10] = "Amplitude";
  73:main.c        **** const char contrast[9] = "Contrast";
  74:main.c        **** const char radio_power[11]= "Radio Power";
  75:main.c        **** const char radio_channel_menu[13]= "Radio Channel";
  76:main.c        **** const char settings[10]="Settings:";
  77:main.c        **** 
  78:main.c        **** int main (void)
  79:main.c        **** {
  80:main.c        **** //*******************************************************
  81:main.c        **** //					Local Variables
  82:main.c        **** //*******************************************************
  83:main.c        **** unsigned long int numberOfChars=0;
  84:main.c        **** 
  85:main.c        **** //*******************************************************
  86:main.c        **** //					Main Code
  87:main.c        **** //*******************************************************
  88:main.c        **** 	//Initialize ARM I/O
  89:main.c        **** 	bootUp();
  90:main.c        **** 	
  91:main.c        **** 	//Initialize the MP3 player with double clock speed and lower volume
  92:main.c        **** 	vs1002Config();			//Configure MP3 I/O
  93:main.c        **** 	vs1002Reset();			//Reset MP3 Player
  94:main.c        **** 	vs1002Init();			//Double the clock speed and set to "New" mode
  95:main.c        **** 	for(char i=0; i<2; i++)vs1002SetVolume(DECREASE);		//Lower the Volume!!
  96:main.c        **** 	vs1002Finish();			//Restore the SPI I/O lines
  97:main.c        **** 	
  98:main.c        **** 	//Show the splash-screen (Sparkfun Logo)
  99:main.c        **** 	LCDInit();				//Initialize the LCD
 100:main.c        **** 	LCDClear(white);		//Clear the screen with white
 101:main.c        **** 	LCDPrintLogo();			//Print the Sparkfun Logo
 102:main.c        **** 	
 103:main.c        **** 	//Initialize the FM Transmitter to 97.3
 104:main.c        **** 	IOCLR1 |= FM_CS;			//Select SPI for FM Transmitter
 105:main.c        **** 	delay_ms(900);				//
 106:main.c        **** 	ns73Config();				//Configigure the FM Trans. I/O
 107:main.c        **** 	ns73Init();					//Setup the Default Register Values
 108:main.c        **** 	ns73SetChannel(973);		//Transmit to 97.3 FM	
 109:main.c        **** 	IOSET1 |= FM_CS;			//Remove FM Transmitter from SPI bus
 110:main.c        **** 	delay_ms(100);				//
 111:main.c        **** 
 112:main.c        **** 	//Find Out how many files are on the SD card
 113:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the 
 114:main.c        **** 	do{
 115:main.c        **** 		numberOfChars++;
 116:main.c        **** 	}while(rootDirectory_files_stream(0)!='\0');			//Get the total number of characters in the filenam
 117:main.c        **** 	char tempNames[numberOfChars];	//This is one array that contains all of the filenames in the SD ca
 118:main.c        **** 	NUMBEROFFILES=rootDirectory_files(tempNames, numberOfChars+1);
 119:main.c        **** 	FileStruct Files[NUMBEROFFILES];						//Dynamically create an array for all of the filenames
 120:main.c        **** 	
 121:main.c        **** 	//Get all of the filenames into a Global Array
 122:main.c        **** 	int chartracker=0;	
 123:main.c        **** 	for(int j=0; j<NUMBEROFFILES; j++){
 124:main.c        **** 		for(int i=0; i<=MAXFILENAMELEN+1; i++){
 125:main.c        **** 			if(chartracker <= numberOfChars){
 126:main.c        **** 				if(tempNames[chartracker]==','){
 127:main.c        **** 					Files[j].file_name[i] = '\0';
 128:main.c        **** 					i=MAXFILENAMELEN+1;
 129:main.c        **** 				}
 130:main.c        **** 				else Files[j].file_name[i] = tempNames[chartracker];
 131:main.c        **** 				chartracker++;
 132:main.c        **** 			}
 133:main.c        **** 			else Files[j].file_name[i] ='\0';
 134:main.c        **** 		}	
 135:main.c        **** 	}
 136:main.c        **** 	
 137:main.c        **** 	
 138:main.c        **** 	//Load the file manager with the songs/files on the SD card and set this as the current display
 139:main.c        **** 	file_manager.total_pages = (NUMBEROFFILES/NUMROWS)-1;
 140:main.c        **** 	if(NUMBEROFFILES%NUMROWS != 0)file_manager.total_pages+=1;
 141:main.c        **** 	
 142:main.c        **** 	file_manager.orientation =ORIENTUP;
 143:main.c        **** 	file_manager.text_color=green;
 144:main.c        **** 	file_manager.back_color=black;
 145:main.c        **** 	
 146:main.c        **** 	file_manager.current_page=0;
 147:main.c        **** 	file_manager.current_row=1;
 148:main.c        **** 	file_manager.current_index=0;	
 149:main.c        **** 	getNewFiles(&file_manager, &Files[0]);
 150:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++)file_manager.title[i]=welcome[i];
 151:main.c        **** 	
 152:main.c        **** 	//Generate the settings menu and fill in default settings values
 153:main.c        **** 	fillSettings(&settings_menu);
 154:main.c        **** 	
 155:main.c        **** 	//Setup the menu
 156:main.c        **** 	current_display = &file_manager;
 157:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 158:main.c        **** 	LCDClear(current_display->back_color);
 159:main.c        **** 	printMenu(current_display);
 160:main.c        **** 	
 161:main.c        **** 	while(1){
 162:main.c        **** 		if(IOPIN0 & (1<<23))
 163:main.c        **** 		{
 164:main.c        **** 			LCDClear(white);
 165:main.c        **** 			LCDPrintString(USB, 0, black, 7,4,current_display->orientation);
 166:main.c        **** 			VICIntEnClr = 0x30;		//Stop all interrupts to allow USB communication
 167:main.c        **** 			main_msc();
 168:main.c        **** 			reset();
 169:main.c        **** 		}
 170:main.c        **** 	
 171:main.c        **** 		//Wait for a button to be pressed or for the screen to be rotated.
 172:main.c        **** 		//while(!button_pressed && !update_screen){
 173:main.c        **** 		if(!button_pressed && !update_screen){
 174:main.c        **** 			//If the current song is done playing, start playing the next song if it's available.
 175:main.c        **** 			if(song_is_over){
 176:main.c        **** 				VICIntEnClr = 0x20;			//Stop the "Send Song" interrupts
 177:main.c        **** 				closeSong(&current_song);	//Close the current song
 178:main.c        **** 				file_is_open=0;				//change master flag
 179:main.c        **** 				ledBlueOff();
 180:main.c        **** 				//Get the next song on the page by changing rows
 181:main.c        **** 				if(file_manager.current_row < NUMROWS){
 182:main.c        **** 					file_manager.current_row++;
 183:main.c        **** 					file_manager.current_index++;
 184:main.c        **** 				}
 185:main.c        **** 				//Go to the next page of songs if necessary
 186:main.c        **** 				if((file_manager.current_row == NUMROWS) && (file_manager.current_page < file_manager.total_pag
 187:main.c        **** 					file_manager.current_row=1;
 188:main.c        **** 					file_manager.current_index=0;
 189:main.c        **** 					file_manager.current_page++;
 190:main.c        **** 					getNewFiles(&file_manager, &Files[0]);		//Get the next page of songs
 191:main.c        **** 				}
 192:main.c        **** 				//If there is another song in the list, get it and play it!
 193:main.c        **** 				if(file_manager.list[file_manager.current_row+1].file_name[0] != '\0'){	
 194:main.c        **** 					LCDClear(file_manager.back_color);
 195:main.c        **** 					printMenu(&file_manager);									//Print the menu with the next song!
 196:main.c        **** 					file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.					
 197:main.c        **** 					vs1002Config();												//Enable the MP3 Comm. Lines
 198:main.c        **** 					vs1002SCIWrite(SCI_MODE, SM_SDINEW);						//Make sure the MP3 player is in the right mode.
 199:main.c        **** 					vs1002Finish();												//Disable the MP3 Comm. Lines
 200:main.c        **** 					ledBlueOn();
 201:main.c        **** 					VICIntEnable |= 0x20;		//Enable Timer 0 Interrupts(This is the "Song Sending" interrupt).
 202:main.c        **** 				}	
 203:main.c        **** 			}
 204:main.c        **** 		}
 205:main.c        **** 
 206:main.c        **** 		if(button_pressed == UP_BUT)handleUpButton(current_display, &Files[0]);	
 207:main.c        **** 		else if(button_pressed == DWN_BUT)handleDownButton(current_display, &Files[0]);
 208:main.c        **** 		else if(button_pressed == MID_BUT)handleMiddleButton();
 209:main.c        **** 		
 210:main.c        **** 		else if(update_screen){
 211:main.c        **** 			VICIntEnClr = 0x10;	//Stop interrupts and allow accelerometer to stabilize
 212:main.c        **** 			delay_ms(300);
 213:main.c        **** 			if(MMA_get_y()>700 && prev_position>700){	//Get new accelerometer value; make sure position is c
 214:main.c        **** 				if(file_is_open)quickClear(current_display);
 215:main.c        **** 				else LCDClear(current_display->back_color);
 216:main.c        **** 				current_display = &settings_menu;
 217:main.c        **** 				current_display->orientation=ORIENTLEFT;
 218:main.c        **** 				ledBlueOff();
 219:main.c        **** 				if(file_is_open)ledGrnOn();
 220:main.c        **** 				else ledRedOn();
 221:main.c        **** 			}
 222:main.c        **** 			else if(MMA_get_y()<700 && prev_position<700){
 223:main.c        **** 				if(file_is_open)quickClear(current_display);
 224:main.c        **** 				else LCDClear(current_display->back_color);
 225:main.c        **** 				current_display = &file_manager;
 226:main.c        **** 				current_display->orientation=ORIENTUP;
 227:main.c        **** 				ledGrnOff();
 228:main.c        **** 				ledRedOff();
 229:main.c        **** 				if(file_is_open)ledBlueOn();
 230:main.c        **** 			}
 231:main.c        **** 			printMenu(current_display);					//If the screen has changed, show the new menu
 232:main.c        **** 			VICIntEnable |= 0x10;						//Re-enable interrupts
 233:main.c        **** 		}
 234:main.c        **** 		button_pressed=NO_BUT;
 235:main.c        **** 		VICIntEnable |= 0x10;
 236:main.c        **** 	}
 237:main.c        ****     return 0;
 238:main.c        **** }
 239:main.c        **** 
 240:main.c        **** 
 241:main.c        **** //Usage: delay_ms(1000);
 242:main.c        **** //Inputs: int count: Number of milliseconds to delay
 243:main.c        **** //The function will cause the firmware to delay for "count" milleseconds.
 244:main.c        **** void delay_ms(int count)
 245:main.c        **** {
  99              		.loc 1 245 0
 100              		@ Function supports interworking.
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL0:
 246:main.c        ****     int i;
 247:main.c        ****     count *= 10000;
 105              		.loc 1 247 0
 106 0000 1C309FE5 		ldr	r3, .L6
 107 0004 930000E0 		mul	r0, r3, r0
 108              	.LVL1:
 109 0008 0030A0E3 		mov	r3, #0
 110              	.LVL2:
 111              		.loc 1 245 0
 112              		@ lr needed for prologue
 113 000c 040000EA 		b	.L2
 114              	.L3:
 248:main.c        ****     for (i = 0; i < count; i++)
 249:main.c        ****         asm volatile ("nop");
 115              		.loc 1 249 0
 116 0010 0000A0E1 		nop
 117              		.loc 1 248 0
 118 0014 013083E2 		add	r3, r3, #1
 119              	.L2:
 120 0018 000053E1 		cmp	r3, r0
 121 001c 020000BA 		blt	.L3
 250:main.c        **** }
 122              		.loc 1 250 0
 123 0020 1EFF2FE1 		bx	lr
 124              	.L7:
 125              		.align	2
 126              	.L6:
 127 0024 10270000 		.word	10000
 128              	.LFE3:
 130              		.align	2
 131              		.global	getNewFiles
 133              	getNewFiles:
 134              	.LFB8:
 251:main.c        **** 
 252:main.c        **** //Usage: bootUp();
 253:main.c        **** //Inputs: None
 254:main.c        **** //This function initializes the serial port, the SD card, the I/O pins and the interrupts
 255:main.c        **** void bootUp(void)
 256:main.c        **** {
 257:main.c        ****     rprintf_devopen(putc_serial0); //Init rprintf
 258:main.c        ****     delay_ms(10); //Delay for power to stablize
 259:main.c        **** 
 260:main.c        ****     //Bring up SD and FAT
 261:main.c        ****     if(!sd_raw_init())
 262:main.c        ****     {
 263:main.c        ****         rprintf("SD Init Error\n");
 264:main.c        ****     }
 265:main.c        ****     if(openroot())
 266:main.c        ****     {
 267:main.c        ****         rprintf("SD OpenRoot Error\n");
 268:main.c        ****     }
 269:main.c        ****      
 270:main.c        **** 	//Initialize I/O Ports and Peripherals
 271:main.c        **** 	//Setup the MP3 I/O Lines
 272:main.c        **** 	IODIR0 |= MP3_XCS;
 273:main.c        **** 	IODIR0 &= ~MP3_DREQ;
 274:main.c        **** 	PINSEL1 |= 0x00000C00;	//Set the MP3_DREQ Pin to be a capture pin
 275:main.c        **** 	IODIR1 |= MP3_XDCS | MP3_GPIO0 | MP3_XRES;	
 276:main.c        **** 	
 277:main.c        **** 	//Setupt the FM Trans. Lines
 278:main.c        **** 	IODIR1 |= FM_LA; 												//FM Trans Outputs (Leave SPI pins unconfigured for now)
 279:main.c        **** 	IODIR1 |= FM_CS;
 280:main.c        **** 	
 281:main.c        **** 	//Setup the SD Card I/O Lines
 282:main.c        **** 	IODIR0 |= SD_CS;												//SD Card Outputs
 283:main.c        **** 	
 284:main.c        **** 	//Setup the Accelerometer I/O Lines
 285:main.c        **** 	IODIR0 |= (GS1 | GS2);											//Accelerometer Outputs
 286:main.c        **** 	PINSEL0 |= (MMA_X_PINSEL | MMA_Y_PINSEL | MMA_Z_PINSEL);		//Make sure that ADC pins have ADC Funct
 287:main.c        **** 	IOCLR0 = (GS1 | GS2);											//Init. Accel. to 1.5G Mode
 288:main.c        **** 	
 289:main.c        **** 	//Setup the LCD I/O Lines
 290:main.c        **** 	IODIR0 |= (LCD_RES | LCD_CS);									//LCD Outputs
 291:main.c        **** 	
 292:main.c        **** 	//Setup the LED Lines										
 293:main.c        **** 	IODIR0 |= (LED_BLU | LED_RED | LED_GRN);						//Led's
 294:main.c        **** 	ledBlueOff();
 295:main.c        **** 	ledRedOff();
 296:main.c        **** 	ledGrnOff();
 297:main.c        **** 	
 298:main.c        **** 	//Setup the Buttons
 299:main.c        **** 	IODIR1 &= (~SW_UP & ~SW_DWN & ~SW_MID);		//Button Inputs
 300:main.c        **** 
 301:main.c        **** 	IODIR0 &= ~(1<<23);							//Set the Vbus line as an input
 302:main.c        **** 
 303:main.c        ****     //Setupt the Interrupts
 304:main.c        **** 	VPBDIV=1;										// Set PCLK equal to the System Clock	
 305:main.c        **** 	VICIntSelect = ~0x30; 							// Timer 0 AND TIMER 1 interrupt is an IRQ interrupt
 306:main.c        ****     VICIntEnable = 0x10; 							// Enable Timer 0 Interrupts (Don't start sending song data with Ti
 307:main.c        ****     VICVectCntl0= 0x25; 							// Use slot 0 for timer 1 interrupt
 308:main.c        ****     VICVectAddr0 = (unsigned int)timer1ISR; 		// Set the address of ISR for slot 1		
 309:main.c        ****     VICVectCntl1 = 0x24; 							// Use slot 1 for timer 0 interrupt
 310:main.c        ****     VICVectAddr1 = (unsigned int)timer0ISR; 		// Set the address of ISR for slot 1
 311:main.c        **** 	
 312:main.c        **** 	//Configure Timer0
 313:main.c        **** 	T0PR = 1500;									//Divide Clock(60MHz) by 1500 for 40kHz PS
 314:main.c        **** 	T0TCR |=0X01;									//Enable the clock
 315:main.c        **** 	T0CTCR=0;										//Timer Mode
 316:main.c        **** 	T0MCR=0x0003;									//Interrupt and Reset Timer on Match
 317:main.c        **** 	T0MR0=1000;										//Interrupt on 40Hz
 318:main.c        **** 	
 319:main.c        **** 	//Configure Timer1
 320:main.c        **** 	T1PR = 200;										//Divide Clock by 300 for 40kHz PS
 321:main.c        **** 	T1TCR |=0X01;									//Enable the clock
 322:main.c        **** 	T1CTCR=0;										//Timer Mode
 323:main.c        **** 	T1CCR=0x0A00;									//Capture and interrupt on the rising edge of DREQ
 324:main.c        **** 	
 325:main.c        **** 	//Setup the SPI Port
 326:main.c        ****     S0SPCCR = 64;              											// SCK = 1 MHz, counter > 8 and even
 327:main.c        ****     S0SPCR  = 0x20;                										// Master, no interrupt enable, 8 bits	
 328:main.c        **** }
 329:main.c        **** 
 330:main.c        **** //Usage: None (Automatically Called by FW)
 331:main.c        **** //Inputs: None
 332:main.c        **** //This function is a global interrupt called by a match on the Timer 0 match.  This interrupt
 333:main.c        **** //	is responsible for sending music to the MP3 player when it is needed. 
 334:main.c        **** //WARNING: Altering the Timer 0 Prescale register or Timer 0 Match value will put proper MP3 playin
 335:main.c        **** //			Adding superfluous code to this interrupt section may also contribute to improper MP3 playback
 336:main.c        **** static void timer1ISR(void)
 337:main.c        **** {
 338:main.c        **** 	vs1002Config();												//Enable MP3 Comm. Lines
 339:main.c        **** 	while(IOPIN0 & MP3_DREQ){
 340:main.c        **** 		vs1002SendMusic(current_song.data, MAXBUFFERSIZE);		//Send the buffered song data
 341:main.c        **** 		if(fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0)song_is_over=1;	//
 342:main.c        **** 		else song_is_over=0;									//if there's no more data available, set the flag, else leave it alo
 343:main.c        **** 	}	
 344:main.c        **** 	vs1002Finish();												//Disable MP3 Comm. Lines
 345:main.c        **** 	T1IR = 0xFF; 												//Clear the timer 0 interrupt
 346:main.c        **** 	VICVectAddr = 0; 											//Update VIC priorities	
 347:main.c        **** }
 348:main.c        **** 
 349:main.c        **** //Usage: None (Automatically Called by FW)
 350:main.c        **** //Inputs: None
 351:main.c        **** //This function is a global interrupt called by a match on the Timer 1 match.  The interrupt
 352:main.c        **** // is responsible for determining if a button has been pressed or if the screen has been rotated
 353:main.c        **** // and setting the appropriate global flag if either has occured.
 354:main.c        **** static void timer0ISR(void)
 355:main.c        **** {
 356:main.c        **** 	button_pressed=getButton();			//Find out if a button has been pressed, and which one
 357:main.c        **** 	cur_position=MMA_get_y();			//Get the current position of the screen
 358:main.c        **** 	if((prev_position<700 && cur_position>700)||(prev_position>700 && cur_position<700))update_screen=
 359:main.c        **** 	else update_screen=0;				//Determine if the accelerometer has been rotated
 360:main.c        **** 	prev_position=cur_position;			//Save the position value for later reference
 361:main.c        **** 	T0IR = 0xFF;						//Clear the timer interrupt
 362:main.c        **** 	VICVectAddr =0;						//Update the VIC priorities
 363:main.c        **** }
 364:main.c        **** 
 365:main.c        **** //Usage: button_value=getButton();
 366:main.c        **** //Inputs:  None
 367:main.c        **** //Outputs: None
 368:main.c        **** //Function returns the value of the button that is currently being pressed.
 369:main.c        **** // UP_BUT, DWN_BUT, and MID_BUT values can be viewed in MP3Dev.h
 370:main.c        **** char getButton(void){
 371:main.c        **** 	if(!(IOPIN1 & SW_UP)) return UP_BUT;
 372:main.c        **** 	else if(!(IOPIN1 & SW_DWN)) return DWN_BUT;
 373:main.c        **** 	else if(!(IOPIN1 & SW_MID)) return MID_BUT;
 374:main.c        **** 	return NO_BUT;
 375:main.c        **** }
 376:main.c        **** 
 377:main.c        **** 
 378:main.c        **** void getNewFiles(DisplayStruct *files, FileStruct *file_list){
 135              		.loc 1 378 0
 136              		@ Function supports interworking.
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              	.LVL3:
 140 0028 30402DE9 		stmfd	sp!, {r4, r5, lr}
 141              	.LCFI0:
 379:main.c        **** 	if(files->current_page < files->total_pages){
 142              		.loc 1 379 0
 143 002c 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 144 0030 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 145 0034 030052E1 		cmp	r2, r3
 146              		.loc 1 378 0
 147 0038 0150A0E1 		mov	r5, r1
 148              	.LBB2:
 380:main.c        **** 		for(int i =0; i<NUMROWS; i++){
 381:main.c        **** 			for(int j=0; j<MAXFILENAMELEN; j++){
 382:main.c        **** 				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 383:main.c        **** 			}
 384:main.c        **** 		}
 385:main.c        **** 	}
 386:main.c        **** 	else{
 387:main.c        **** 		for(int i=0; i<(NUMBEROFFILES-files->total_pages*NUMROWS); i++){
 149              		.loc 1 387 0
 150 003c 00C0A033 		movcc	ip, #0
 151              	.LVL4:
 152 0040 0CE0A033 		movcc	lr, #12
 153              	.LBE2:
 154              		.loc 1 379 0
 155              	.LVL5:
 156              	.LBB3:
 157              		.loc 1 387 0
 158 0044 C8309F25 		ldrcs	r3, .L28
 159 0048 00409325 		ldrcs	r4, [r3, #0]
 160 004c 00E0A023 		movcs	lr, #0
 161              	.LVL6:
 162 0050 3100002A 		bcs	.L11
 163              	.LVL7:
 164              	.L12:
 165 0054 0010A0E3 		mov	r1, #0
 166              	.L13:
 167              	.LBE3:
 168              	.LBB4:
 169              	.LBB5:
 170              		.loc 1 382 0
 171 0058 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 172 005c 0F30A0E3 		mov	r3, #15
 173 0060 92C323E0 		mla	r3, r2, r3, ip
 174 0064 833281E0 		add	r3, r1, r3, asl #5
 175 0068 0520D3E7 		ldrb	r2, [r3, r5]	@ zero_extendqisi2
 176 006c 013080E0 		add	r3, r0, r1
 177              		.loc 1 381 0
 178 0070 011081E2 		add	r1, r1, #1
 179 0074 1E0051E3 		cmp	r1, #30
 180              		.loc 1 382 0
 181 0078 0E20C3E7 		strb	r2, [r3, lr]
 182              		.loc 1 381 0
 183 007c 1400001A 		bne	.L13
 184              	.LBE5:
 185              		.loc 1 380 0
 186 0080 01C08CE2 		add	ip, ip, #1
 187 0084 0F005CE3 		cmp	ip, #15
 188 0088 20E08EE2 		add	lr, lr, #32
 189 008c 4100000A 		beq	.L22
 190 0090 130000EA 		b	.L12
 191              	.LVL8:
 192              	.L16:
 193 0094 00C0A0E3 		mov	ip, #0
 194              	.LVL9:
 195              	.L17:
 196              	.LBE4:
 197              	.LBB6:
 198              	.LBB7:
 388:main.c        **** 			for(int j=0; j<MAXFILENAMELEN; j++){
 389:main.c        **** 				files->list[i].file_name[j] = file_list[files->current_page*NUMROWS+i].file_name[j];
 199              		.loc 1 389 0
 200 0098 0620D0E5 		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 201              	.LVL10:
 202 009c 0F30A0E3 		mov	r3, #15
 203 00a0 92E323E0 		mla	r3, r2, r3, lr
 204 00a4 83328CE0 		add	r3, ip, r3, asl #5
 205 00a8 0510D3E7 		ldrb	r1, [r3, r5]	@ zero_extendqisi2
 206 00ac 0C2080E0 		add	r2, r0, ip
 207 00b0 8E32A0E1 		mov	r3, lr, asl #5
 208              		.loc 1 388 0
 209 00b4 01C08CE2 		add	ip, ip, #1
 210              		.loc 1 389 0
 211 00b8 0C3083E2 		add	r3, r3, #12
 212              		.loc 1 388 0
 213 00bc 1E005CE3 		cmp	ip, #30
 214              		.loc 1 389 0
 215 00c0 0310C2E7 		strb	r1, [r2, r3]
 216              		.loc 1 388 0
 217 00c4 2400001A 		bne	.L17
 218              	.LBE7:
 219              		.loc 1 387 0
 220 00c8 01E08EE2 		add	lr, lr, #1
 221              	.LVL11:
 222              	.L11:
 223 00cc 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 224 00d0 0F20A0E3 		mov	r2, #15
 225 00d4 920303E0 		mul	r3, r2, r3
 226 00d8 042063E0 		rsb	r2, r3, r4
 227              	.LVL12:
 228 00dc 02005EE1 		cmp	lr, r2
 229 00e0 230000BA 		blt	.L16
 230 00e4 8232A0E1 		mov	r3, r2, asl #5
 231 00e8 0C3083E2 		add	r3, r3, #12
 232 00ec 030080E0 		add	r0, r0, r3
 233              	.LVL13:
 234 00f0 3D0000EA 		b	.L20
 235              	.L21:
 236              	.LBE6:
 237              	.LBB8:
 390:main.c        **** 			}
 391:main.c        **** 		}
 392:main.c        **** 		for(int i=(NUMBEROFFILES-files->total_pages*NUMROWS); i<NUMROWS; i++)files->list[i].file_name[0]=
 238              		.loc 1 392 0
 239 00f4 0030A0E3 		mov	r3, #0
 240 00f8 203040E5 		strb	r3, [r0, #-32]
 241              	.L20:
 242 00fc 0E0052E3 		cmp	r2, #14
 243 0100 200080E2 		add	r0, r0, #32
 244 0104 012082E2 		add	r2, r2, #1
 245 0108 3B0000DA 		ble	.L21
 246              	.LVL14:
 247              	.L22:
 248              	.LBE8:
 393:main.c        **** 	}
 394:main.c        **** }
 249              		.loc 1 394 0
 250 010c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 251 0110 1EFF2FE1 		bx	lr
 252              	.L29:
 253              		.align	2
 254              	.L28:
 255 0114 04000000 		.word	NUMBEROFFILES
 256              	.LFE8:
 258              		.align	2
 259              		.global	fillSettings
 261              	fillSettings:
 262              	.LFB13:
 395:main.c        **** 
 396:main.c        **** //Usage: file_is_open = loadSongInfo(&current_song, &file_manager);
 397:main.c        **** //Inputs: SongStruct *song: Pointer to the struct in which the song information will be loaded
 398:main.c        **** //		  DisplayStruct *selected_song: Pointer to the song whose information will be loaded
 399:main.c        **** //The function takes the currently selected file name from the selected_song structure and loads
 400:main.c        **** // the vital file information into the song structure.  The function also opens the song and prepar
 401:main.c        **** // it to be played.  If the function succesfully opens the song, a 1 is returned, else a 0 is retur
 402:main.c        **** char loadSongInfo(SongStruct *song, DisplayStruct *selected_song){
 403:main.c        **** 	//Get the selected songs file name
 404:main.c        **** 	for(int i=0; i<MAXFILENAMELEN; i++){
 405:main.c        **** 		song->file_name[i] = selected_song->list[selected_song->current_index].file_name[i];
 406:main.c        **** 	}
 407:main.c        **** 	//Get the selected songs display name
 408:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 409:main.c        **** 		if((song->file_name[i] == '.') || (i==MAXDISPLEN-1)){
 410:main.c        **** 			song->name[i]='\0';
 411:main.c        **** 			i=MAXDISPLEN;
 412:main.c        **** 		}	
 413:main.c        **** 		else song->name[i]=song->file_name[i];
 414:main.c        **** 	}
 415:main.c        **** 	
 416:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);	//Make sure SPI is selected for reading the 
 417:main.c        **** 	//Check to see if the selected song is valid
 418:main.c        **** 	if(!root_file_exists(song->file_name)){
 419:main.c        **** 		PINSEL0 &= 0xFFFFC00F;
 420:main.c        **** 		return 0;
 421:main.c        **** 	}	
 422:main.c        **** 	//Open the selected song
 423:main.c        **** 	else{
 424:main.c        **** 		song->handle=root_open(song->file_name);
 425:main.c        **** 		song->size=fat16_file_size(song->handle);
 426:main.c        **** 		fat16_read_file(song->handle, song->data, MAXBUFFERSIZE);
 427:main.c        **** 	}
 428:main.c        **** 	
 429:main.c        **** 	
 430:main.c        **** 	PINSEL0 &= 0xFFFFC00F;
 431:main.c        **** 	return 1;
 432:main.c        **** }
 433:main.c        **** 
 434:main.c        **** //Usage: CloseSong(&current_song);
 435:main.c        **** //Inputs: SongStruct *song: Pointer to a song structure to be closed
 436:main.c        **** //Function closes a song that is currently open.
 437:main.c        **** void closeSong(SongStruct *song){
 438:main.c        **** 	PINSEL0 |= (SCLK_PINSEL | MISO_PINSEL | MOSI_PINSEL);
 439:main.c        **** 	fat16_close_file(song->handle);
 440:main.c        **** 	PINSEL0 &= 0xFFFFC00F;
 441:main.c        **** }
 442:main.c        **** 
 443:main.c        **** //Usage: highlightRow(&current_display, PREVIOUS);
 444:main.c        **** //Inputs: DisplayStruct *current_display: Pointer to the display structure whose current row value 
 445:main.c        **** //		  char direction: direction value can be PREVIOUS or NEXT.  Value indicates which row should be
 446:main.c        **** //Depending on "direction" this value highlights a row, and manages the current_row and current_ind
 447:main.c        **** void highlightRow(DisplayStruct *display, char direction){
 448:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 449:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 450:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->text_color, display->cu
 451:main.c        **** 	if(direction == PREVIOUS){
 452:main.c        **** 		display->current_row--;
 453:main.c        **** 		display->current_index--;
 454:main.c        **** 	}
 455:main.c        **** 	else{
 456:main.c        **** 		display->current_row++;
 457:main.c        **** 		display->current_index++;		
 458:main.c        **** 	}
 459:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 460:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 461:main.c        **** }
 462:main.c        **** 
 463:main.c        **** //Usage: printMenu(&settings_menu);
 464:main.c        **** //Inputs: DisplayStruct *display: Pointer to the display struct to be displayed on the LCD.
 465:main.c        **** //This function writes the title, along with all of the file names in the display struct to the scr
 466:main.c        **** void printMenu(DisplayStruct *display){
 467:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 468:main.c        **** 	if(display->current_page==0)LCDPrintString(display->title,0, display->text_color, 0,0,display->ori
 469:main.c        **** 	for(int j=0; j<NUMROWS; j++){
 470:main.c        **** 		LCDPrintString(display->list[j].file_name,0, display->text_color, j+1,0,display->orientation);
 471:main.c        **** 	}
 472:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->text_color, display->orientation);
 473:main.c        **** 	LCDPrintString(display->list[display->current_index].file_name, 0,display->back_color, display->cu
 474:main.c        **** }
 475:main.c        **** 
 476:main.c        **** //Usage: fillSettings(&settings_menu, &settings_values);
 477:main.c        **** //Inputs: DisplayStruct *menu: Struct whose file names should be loaded with the settings menu
 478:main.c        **** //		  SettingsStruct *values: settings struct whose initial values should be set
 479:main.c        **** //This function fills the input display struct with a list of settings, along with a "settings" tit
 480:main.c        **** //also loads the default display values along with the default settings values. 
 481:main.c        **** void fillSettings(DisplayStruct *menu){
 263              		.loc 1 481 0
 264              		@ Function supports interworking.
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              	.LVL15:
 268 0118 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 269              	.LCFI1:
 270              		.loc 1 481 0
 271 011c 9C509FE5 		ldr	r5, .L40
 272 0120 9C809FE5 		ldr	r8, .L40+4
 273 0124 9C709FE5 		ldr	r7, .L40+8
 274 0128 9C609FE5 		ldr	r6, .L40+12
 275 012c 0040A0E1 		mov	r4, r0
 276 0130 00E0A0E1 		mov	lr, r0
 277              	.L31:
 278              	.LBB9:
 482:main.c        **** 	for(int i=0; i<MAXDISPLEN; i++){
 483:main.c        **** 		menu->list[0].file_name[i] = volume[i];
 279              		.loc 1 483 0
 280 0134 0120D5E4 		ldrb	r2, [r5], #1	@ zero_extendqisi2
 281              		.loc 1 482 0
 282 0138 90309FE5 		ldr	r3, .L40+16
 484:main.c        **** 		menu->list[1].file_name[i] = radio_power[i];
 283              		.loc 1 484 0
 284 013c 0110D8E4 		ldrb	r1, [r8], #1	@ zero_extendqisi2
 485:main.c        **** 		menu->list[2].file_name[i] = radio_channel_menu[i];
 285              		.loc 1 485 0
 286 0140 0100D7E4 		ldrb	r0, [r7], #1	@ zero_extendqisi2
 287              	.LVL16:
 486:main.c        **** 		menu->title[i] = settings[i];
 288              		.loc 1 486 0
 289 0144 01C0D6E4 		ldrb	ip, [r6], #1	@ zero_extendqisi2
 290              		.loc 1 482 0
 291 0148 030055E1 		cmp	r5, r3
 292              		.loc 1 483 0
 293 014c 0C20CEE5 		strb	r2, [lr, #12]
 294              		.loc 1 484 0
 295 0150 2C10CEE5 		strb	r1, [lr, #44]
 296              		.loc 1 485 0
 297 0154 4C00CEE5 		strb	r0, [lr, #76]
 298              		.loc 1 486 0
 299 0158 ECC1CEE5 		strb	ip, [lr, #492]
 300 015c 01E08EE2 		add	lr, lr, #1
 301              		.loc 1 482 0
 302 0160 4B00001A 		bne	.L31
 303 0164 0430A0E1 		mov	r3, r4
 304 0168 0320A0E3 		mov	r2, #3
 305              	.LVL17:
 306              	.L33:
 307              	.LBE9:
 308              	.LBB10:
 487:main.c        **** 	}
 488:main.c        **** 	for(int i=3; i<NUMROWS; i++){
 309              		.loc 1 488 0
 310 016c 012082E2 		add	r2, r2, #1
 489:main.c        **** 		menu->list[i].file_name[0]='\0';
 311              		.loc 1 489 0
 312 0170 0010A0E3 		mov	r1, #0
 313              		.loc 1 488 0
 314 0174 0F0052E3 		cmp	r2, #15
 315              		.loc 1 489 0
 316 0178 6C10C3E5 		strb	r1, [r3, #108]
 317              		.loc 1 488 0
 318 017c 203083E2 		add	r3, r3, #32
 319 0180 5900001A 		bne	.L33
 320              	.LBE10:
 490:main.c        **** 	}
 491:main.c        **** 	menu->text_color=white;
 321              		.loc 1 491 0
 322 0184 48309FE5 		ldr	r3, .L40+20
 323 0188 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 324 018c 0330C4E5 		strb	r3, [r4, #3]
 492:main.c        **** 	menu->back_color=black;
 325              		.loc 1 492 0
 326 0190 40309FE5 		ldr	r3, .L40+24
 327 0194 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 328              	.LVL18:
 493:main.c        **** 	menu->current_row=1;
 329              		.loc 1 493 0
 330 0198 0130A0E3 		mov	r3, #1
 494:main.c        **** 	menu->current_column=0;
 495:main.c        **** 	menu->current_index=0;
 496:main.c        **** 	menu->orientation = ORIENTLEFT;
 497:main.c        **** 	menu->current_page=0;
 498:main.c        **** 	menu->total_pages = 0;
 331              		.loc 1 498 0
 332 019c 0510C4E5 		strb	r1, [r4, #5]
 333              		.loc 1 492 0
 334 01a0 0420C4E5 		strb	r2, [r4, #4]
 335              		.loc 1 496 0
 336 01a4 0230C4E5 		strb	r3, [r4, #2]
 337              		.loc 1 493 0
 338 01a8 0030C4E5 		strb	r3, [r4, #0]
 339              		.loc 1 494 0
 340 01ac 0110C4E5 		strb	r1, [r4, #1]
 341              		.loc 1 495 0
 342 01b0 081084E5 		str	r1, [r4, #8]
 343              		.loc 1 497 0
 344 01b4 0610C4E5 		strb	r1, [r4, #6]
 499:main.c        **** }
 345              		.loc 1 499 0
 346 01b8 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 347 01bc 1EFF2FE1 		bx	lr
 348              	.L41:
 349              		.align	2
 350              	.L40:
 351 01c0 00000000 		.word	volume
 352 01c4 00000000 		.word	radio_power
 353 01c8 00000000 		.word	radio_channel_menu
 354 01cc 00000000 		.word	settings
 355 01d0 16000000 		.word	volume+22
 356 01d4 00000000 		.word	white
 357 01d8 00000000 		.word	black
 358              	.LFE13:
 360              		.align	2
 361              		.global	reset
 363              	reset:
 364              	.LFB18:
 500:main.c        **** 
 501:main.c        **** //Usage: handleUpButton(current_display, &Files[0]);
 502:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 503:main.c        **** //			FileStruct *Files: List of files on the SD card
 504:main.c        **** //Outputs: None
 505:main.c        **** //Description: This function will highlight the previous row on the screen.  If the file menu is be
 506:main.c        **** // and the first file is currently selected, the function will get the previous group of files and 
 507:main.c        **** void handleUpButton(DisplayStruct *display, FileStruct *Files){
 508:main.c        **** 	if(display->current_row >1){	//See if the currently highlighted row is at the top of the page
 509:main.c        **** 		highlightRow(display, PREVIOUS); //If it isn't, then highlight the previous row
 510:main.c        **** 	}
 511:main.c        **** 	//If the current row is at the top of the page, and there are previous songs, then get them.
 512:main.c        **** 	else if((display->current_row == 1) && (display->current_page > 0)){	//If a prev. page exists, loa
 513:main.c        **** 		//Load previous 15 songs and reset row, index and offset values
 514:main.c        **** 		display->current_page-=1;					//Set the "new" current page to be loaded
 515:main.c        **** 		quickClear(display);
 516:main.c        **** 		display->current_row=15;					//Start current row at bottom of next screen
 517:main.c        **** 		display->current_index=14;					//
 518:main.c        **** 		getNewFiles(&file_manager, &Files[0]);		//Load the previous page
 519:main.c        **** 		printMenu(display);							//	display previous page
 520:main.c        **** 	}
 521:main.c        **** }
 522:main.c        **** 
 523:main.c        **** //Usage: handleDownButton(current_display, &Files[0]);
 524:main.c        **** //Inputs: 	DisplayStruct *display: Display currently being shown to the user.
 525:main.c        **** //			FileStruct *Files: List of files on the SD card
 526:main.c        **** //Outputs: None
 527:main.c        **** //Description: This function will highlight the next row on the screen.  If the file menu is being 
 528:main.c        **** // and the last file is currently selected, the function will get the next group of files and displ
 529:main.c        **** void handleDownButton(DisplayStruct *display, FileStruct *Files){
 530:main.c        **** 	if(display->current_row <15){	//See if the currently highlighted row is at the bottom of the page
 531:main.c        **** 		highlightRow(display, NEXT);	//If it's not, then highlight the next row
 532:main.c        **** 	}
 533:main.c        **** 	//If the current highlighted row is at the bottom, and there're more songs, then get them
 534:main.c        **** 	else if((display->current_row == 15) && (display->current_page < display->total_pages)){
 535:main.c        **** 		//Load next 15 songs and reset row, index and offset values
 536:main.c        **** 		display->current_page+=1;		
 537:main.c        **** 		quickClear(display);
 538:main.c        **** 		display->current_row=1;
 539:main.c        **** 		display->current_index=0;
 540:main.c        **** 		getNewFiles(&file_manager, &Files[0]);
 541:main.c        **** 		printMenu(display);				
 542:main.c        **** 	}
 543:main.c        **** }
 544:main.c        **** 
 545:main.c        **** //Usage: handleMiddleButton();
 546:main.c        **** //Inputs: None
 547:main.c        **** //Outputs: None
 548:main.c        **** //Description: This function is called when the middle button is pressed.
 549:main.c        **** //  The function performs an action based on the current state of the MP3 player.
 550:main.c        **** //	(1.-If the file menu is displayed, and a song is not being played, the function starts the curre
 551:main.c        **** //	(2.-If the file menu is displayed and a song IS being played, the fucntion stops the currently p
 552:main.c        **** //	(3.-If the settings menu is displayed, the function opens the selected setting and allows the us
 553:main.c        **** void handleMiddleButton(void){
 554:main.c        **** 	VICIntEnClr = 0x10;
 555:main.c        **** 	delay_ms(250);
 556:main.c        **** 	
 557:main.c        **** 	//If the File Menu is being displayed, middle button acts like play/stop
 558:main.c        **** 	if(current_display == &file_manager){
 559:main.c        **** 		if(!file_is_open){				//If a file isn't already playing then this acts like a play button
 560:main.c        **** 			file_is_open=loadSongInfo(&current_song, &file_manager);	//Get the current song info.
 561:main.c        **** 			if(!file_is_open){			//Make sure this is a valid file
 562:main.c        **** 				LCDClear(white);
 563:main.c        **** 				LCDPrintString(NotFound, 0, black, 1,0,current_display->orientation);
 564:main.c        **** 				delay_ms(1000);
 565:main.c        **** 				LCDClear(black);
 566:main.c        **** 				printMenu(&file_manager);
 567:main.c        **** 			}	
 568:main.c        **** 			else{
 569:main.c        **** 				vs1002Config();							//Enable the MP3 Comm. Lines
 570:main.c        **** 				vs1002SCIWrite(SCI_MODE, SM_SDINEW);	//Make sure the MP3 player is in the right mode.
 571:main.c        **** 				vs1002Finish();							//Disable the MP3 Comm. Lines
 572:main.c        **** 				ledBlueOn();
 573:main.c        **** 				//Send first song data
 574:main.c        **** 				vs1002Config();										//Enable MP3 Comm. Lines
 575:main.c        **** 				while((IOPIN0 & MP3_DREQ) != 0){
 576:main.c        **** 					vs1002SendMusic(current_song.data, MAXBUFFERSIZE);	//Send the buffered song data
 577:main.c        **** 					if(fat16_read_file(current_song.handle, current_song.data, MAXBUFFERSIZE) <= 0)song_is_over=1;
 578:main.c        **** 					else song_is_over=0;									//if there's no more data available, set the flag, else leave it 
 579:main.c        **** 				}
 580:main.c        **** 				vs1002Finish();
 581:main.c        **** 				PINSEL1 |= 0x00000C00;						
 582:main.c        **** 				VICIntEnable |= 0x20;		//Enable Timer 1 Interrupts(This is the "Song Sending" interrupt).
 583:main.c        **** 				IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);		//Assign LCD pins as Outputs
 584:main.c        **** 			}
 585:main.c        **** 		}	
 586:main.c        **** 		else{							//If a file is already open then this acts like a stop button
 587:main.c        **** 			VICIntEnClr = 0x20;											//Disable Time 0 Interrupts(Stop the "Song Sending" interrupt)
 588:main.c        **** 			ledBlueOff();
 589:main.c        **** 			vs1002Config();												//Enable the MP3 Comm Lines
 590:main.c        **** 			vs1002SCIWrite(SCI_MODE, SM_OUTOFWAV);						//Tell the MP3 Player to jump out of WAV decoding
 591:main.c        **** 			for(int i=0; i<150; i++)vs1002SCIWrite(SCI_MODE, 0x00);	//Send 150 zeroes to the player to clear
 592:main.c        **** 			vs1002Finish();												//Disable the MP3 Comm. Lines
 593:main.c        **** 			IODIR0 |= (LCD_DIO | LCD_SCK | LCD_CS | LCD_RES);			//Assign LCD pins as Outputs
 594:main.c        **** 			closeSong(&current_song);									//Close the current song
 595:main.c        **** 			file_is_open=0;												//Clear the global flag
 596:main.c        **** 			VICIntEnable = 0x10;
 597:main.c        **** 		}
 598:main.c        **** 	}
 599:main.c        **** 	
 600:main.c        **** 	//Else we are on the Settings menu, and we need to handle the settins options
 601:main.c        **** 	else{
 602:main.c        **** 		if(file_is_open)quickClear(current_display);
 603:main.c        **** 		else LCDClear(settings_menu.back_color);
 604:main.c        **** 		LCDPrintString(current_display->list[current_display->current_index].file_name,0,current_display-
 605:main.c        **** 		VICIntEnable|=0x10;
 606:main.c        **** 		if(current_display->current_row==VOLUMEMENU){
 607:main.c        **** 			VICIntEnable |= 0x10;
 608:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 609:main.c        **** 			LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 610:main.c        **** 			while(button_pressed < MID_BUT){
 611:main.c        **** 				VICIntEnClr = 0x10;				//Stop Interrupts to
 612:main.c        **** 				delay_ms(150);					//	debounce the switch					
 613:main.c        **** 				if(button_pressed==UP_BUT){
 614:main.c        **** 					if(volume_setting < 32){
 615:main.c        **** 						volume_setting+=1;
 616:main.c        **** 						vs1002Config();				//Enable the MP3 Comm. Lines
 617:main.c        **** 						vs1002SetVolume(INCREASE);	//Lower the volume
 618:main.c        **** 						vs1002Finish();				//Disable MP3 Comm. Lines
 619:main.c        **** 					}	
 620:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 621:main.c        **** 					LCDPrintString("%d", volume_setting, current_display->text_color, 2, 0, current_display->orien
 622:main.c        **** 				}
 623:main.c        **** 				else if(button_pressed==DWN_BUT){
 624:main.c        **** 					if(volume_setting >= 0){
 625:main.c        **** 						volume_setting--;
 626:main.c        **** 						vs1002Config();			//Enable the MP3 Comm. Lines
 627:main.c        **** 						vs1002SetVolume(DECREASE);	//Lower the volume
 628:main.c        **** 						vs1002Finish();			//Disable MP3 Comm. Lines
 629:main.c        **** 					}
 630:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 631:main.c        **** 					LCDPrintString("%d", volume_setting, white, 2, 0, current_display->orientation);
 632:main.c        **** 				}
 633:main.c        **** 				VICIntEnable |= 0x10;
 634:main.c        **** 			}
 635:main.c        **** 		}	
 636:main.c        **** 		else if(current_display->current_row==RADIOCMENU){
 637:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 638:main.c        **** 			LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 639:main.c        **** 			button_pressed=NO_BUT;
 640:main.c        **** 			VICIntEnable |= 0x10;
 641:main.c        **** 			while(button_pressed < MID_BUT){
 642:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 643:main.c        **** 				delay_ms(100);		//	debounce the switch					
 644:main.c        **** 				if(button_pressed==UP_BUT){
 645:main.c        **** 					//Increase Radio Channel
 646:main.c        **** 					if(radio_channel < 1075)radio_channel+=2;
 647:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 648:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 649:main.c        **** 				}
 650:main.c        **** 				else if(button_pressed==DWN_BUT){
 651:main.c        **** 					//Decrease Radio Channel
 652:main.c        **** 					if(radio_channel > 885)radio_channel-=2;
 653:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 654:main.c        **** 					LCDPrintString("%d", radio_channel, white, 2, 0, current_display->orientation);
 655:main.c        **** 				}
 656:main.c        **** 				ns73SetChannel(radio_channel);
 657:main.c        **** 				VICIntEnable |= 0x10;
 658:main.c        **** 			}
 659:main.c        **** 			IOCLR1 |= FM_CS;				//Select the FM transmitter
 660:main.c        **** 			delay_ms(100);
 661:main.c        **** 			ns73Config();					//Configigure the FM Trans. I/O
 662:main.c        **** 			ns73SetChannel(radio_channel);	//Set the channel	
 663:main.c        **** 			IOSET1 |= FM_CS;				//Unselect the FM transmitter
 664:main.c        **** 		}
 665:main.c        **** 		else if(current_display->current_row==RADIOPMENU){
 666:main.c        **** 			LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 667:main.c        **** 			if(radio_enable)LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orient
 668:main.c        **** 			else LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 669:main.c        **** 			button_pressed=NO_BUT;
 670:main.c        **** 			VICIntEnable |= 0x10;
 671:main.c        **** 			while(button_pressed < MID_BUT){
 672:main.c        **** 				VICIntEnClr = 0x10;	//Stop Interrupts to
 673:main.c        **** 				delay_ms(100);		//	debounce the switch					
 674:main.c        **** 				if(button_pressed==UP_BUT){
 675:main.c        **** 					//Enable Radio
 676:main.c        **** 					radio_enable=ON;
 677:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 678:main.c        **** 					LCDPrintString("On", 0, current_display->text_color, 2,0,current_display->orientation);
 679:main.c        **** 					
 680:main.c        **** 					IOCLR1 |= FM_CS;			//Select the FM transmitter
 681:main.c        **** 					delay_ms(100);
 682:main.c        **** 					ns73Config();				//Configigure the FM Trans. I/O
 683:main.c        **** 					ns73Send(R0, PE | AG);		//Power up the radio	
 684:main.c        **** 					IOSET1 |= FM_CS;			//Unselect the FM transmitter
 685:main.c        **** 
 686:main.c        **** 				}
 687:main.c        **** 				else if(button_pressed==DWN_BUT){
 688:main.c        **** 					//Disable Radio
 689:main.c        **** 					radio_enable=OFF;
 690:main.c        **** 					LCDSetRowColor(2, 0, current_display->back_color, current_display->orientation);
 691:main.c        **** 					LCDPrintString("Off", 0, current_display->text_color, 2,0,current_display->orientation);
 692:main.c        **** 
 693:main.c        **** 					IOCLR1 |= FM_CS;			//Select the FM transmitter
 694:main.c        **** 					delay_ms(100);
 695:main.c        **** 					ns73Config();				//Configigure the FM Trans. I/O
 696:main.c        **** 					ns73Send(R0, MUTE);		//Power up the radio	
 697:main.c        **** 					IOSET1 |= FM_CS;			//Unselect the FM transmitter	
 698:main.c        **** 
 699:main.c        **** 				}
 700:main.c        **** 				VICIntEnable |= 0x10;
 701:main.c        **** 			}
 702:main.c        **** 		}
 703:main.c        **** 		if(file_is_open)quickClear(current_display);
 704:main.c        **** 		else LCDClear(current_display->back_color);
 705:main.c        **** 		printMenu(current_display);
 706:main.c        **** 	}
 707:main.c        **** 	VICIntEnable |= 0x10;
 708:main.c        **** }
 709:main.c        **** 
 710:main.c        **** 
 711:main.c        **** //Usage: quickClear(currentDisplay);
 712:main.c        **** //Inputs: DisplayStruct *display - pointer to the display that contains the current display
 713:main.c        **** //Outputs: None
 714:main.c        **** //Description: Rather than painting every pixel a specific color (like LCDClear does) this routine
 715:main.c        **** //			   will simply color all of the text the same color as the background, giving the illusion
 716:main.c        **** //			   of a clear screen.  Only works with the background color.  Much faster than LCDClear, and i
 717:main.c        **** //			   good to use while an MP3 is playing.
 718:main.c        **** void quickClear(DisplayStruct *display){
 719:main.c        **** 	PINSEL0 &= 0xFFFFC00F;		//Hand over SPI lines to LCD talk
 720:main.c        **** 	//If we're on the first page of the menu, we also need to clear the title.
 721:main.c        **** 	if(display->current_page==0){
 722:main.c        **** 		LCDPrintString(display->title,0, display->back_color, 0,0,display->orientation);
 723:main.c        **** 		
 724:main.c        **** 	}
 725:main.c        **** 	LCDSetRowColor(display->current_row, 0, display->back_color, display->orientation);
 726:main.c        **** 	for(int j=0; j<NUMROWS; j++){
 727:main.c        **** 		LCDPrintString(display->list[j].file_name,0, display->back_color, j+1,0,display->orientation);
 728:main.c        **** 		LCDPrintString(newline,0, black, j+1,0,0);
 729:main.c        **** 	}
 730:main.c        **** }
 731:main.c        **** 
 732:main.c        **** void reset(void)
 733:main.c        **** {
 365              		.loc 1 733 0
 366              		@ Function supports interworking.
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 370              	.LVL19:
 734:main.c        ****     // Intentionally fault Watchdog to trigger a reset condition
 735:main.c        ****     WDMOD |= 3;
 371              		.loc 1 735 0
 372 01dc 0E12A0E3 		mov	r1, #-536870912
 373 01e0 003091E5 		ldr	r3, [r1, #0]
 374 01e4 033083E3 		orr	r3, r3, #3
 375 01e8 003081E5 		str	r3, [r1, #0]
 736:main.c        ****     WDFEED = 0xAA;
 376              		.loc 1 736 0
 377 01ec 8E22A0E3 		mov	r2, #-536870904
 378 01f0 AA00A0E3 		mov	r0, #170
 737:main.c        ****     WDFEED = 0x55;
 379              		.loc 1 737 0
 380 01f4 5530A0E3 		mov	r3, #85
 381              		.loc 1 736 0
 382 01f8 000082E5 		str	r0, [r2, #0]
 383              		.loc 1 737 0
 384 01fc 003082E5 		str	r3, [r2, #0]
 738:main.c        ****     WDFEED = 0xAA;
 739:main.c        ****     WDFEED = 0x00;
 385              		.loc 1 739 0
 386 0200 0030A0E3 		mov	r3, #0
 387              		.loc 1 738 0
 388 0204 000082E5 		str	r0, [r2, #0]
 389              		.loc 1 733 0
 390              		@ lr needed for prologue
 391              		.loc 1 739 0
 392 0208 003082E5 		str	r3, [r2, #0]
 740:main.c        **** }
 393              		.loc 1 740 0
 394 020c 1EFF2FE1 		bx	lr
 395              	.LFE18:
 397              		.section	.rodata.str1.4,"aMS",%progbits,1
 398              		.align	2
 399              	.LC0:
 400 0000 53442049 		.ascii	"SD Init Error\012\000"
 400      6E697420 
 400      4572726F 
 400      720A00
 401 000f 00       		.align	2
 402              	.LC1:
 403 0010 5344204F 		.ascii	"SD OpenRoot Error\012\000"
 403      70656E52 
 403      6F6F7420 
 403      4572726F 
 403      720A00
 404              		.text
 405              		.align	2
 406              		.global	bootUp
 408              	bootUp:
 409              	.LFB4:
 410              		.loc 1 256 0
 411              		@ Function supports interworking.
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              	.LVL20:
 415 0210 04E02DE5 		str	lr, [sp, #-4]!
 416              	.LCFI2:
 417              		.loc 1 257 0
 418 0214 E0019FE5 		ldr	r0, .L50
 419 0218 FEFFFFEB 		bl	rprintf_devopen
 420              		.loc 1 258 0
 421 021c 0A00A0E3 		mov	r0, #10
 422 0220 FEFFFFEB 		bl	delay_ms
 423              		.loc 1 261 0
 424 0224 FEFFFFEB 		bl	sd_raw_init
 425 0228 000050E3 		cmp	r0, #0
 426              		.loc 1 263 0
 427 022c CC019F05 		ldreq	r0, .L50+4
 428 0230 FEFFFF0B 		bleq	rprintf
 429              	.L45:
 430              		.loc 1 265 0
 431 0234 FEFFFFEB 		bl	openroot
 432 0238 000050E3 		cmp	r0, #0
 433              		.loc 1 267 0
 434 023c C0019F15 		ldrne	r0, .L50+8
 435 0240 FEFFFF1B 		blne	rprintf
 436              	.L47:
 437              		.loc 1 272 0
 438 0244 BC119FE5 		ldr	r1, .L50+12
 439 0248 003091E5 		ldr	r3, [r1, #0]
 440 024c 013683E3 		orr	r3, r3, #1048576
 441 0250 003081E5 		str	r3, [r1, #0]
 442              		.loc 1 273 0
 443 0254 003091E5 		ldr	r3, [r1, #0]
 444 0258 0236C3E3 		bic	r3, r3, #2097152
 445 025c 003081E5 		str	r3, [r1, #0]
 446              		.loc 1 274 0
 447 0260 A4219FE5 		ldr	r2, .L50+16
 448 0264 003092E5 		ldr	r3, [r2, #0]
 449 0268 033B83E3 		orr	r3, r3, #3072
 450 026c 003082E5 		str	r3, [r2, #0]
 451              		.loc 1 275 0
 452 0270 98019FE5 		ldr	r0, .L50+20
 453 0274 003090E5 		ldr	r3, [r0, #0]
 454 0278 013483E3 		orr	r3, r3, #16777216
 455 027c 033883E3 		orr	r3, r3, #196608
 456 0280 003080E5 		str	r3, [r0, #0]
 457              		.loc 1 278 0
 458 0284 003090E5 		ldr	r3, [r0, #0]
 459 0288 023483E3 		orr	r3, r3, #33554432
 460 028c 003080E5 		str	r3, [r0, #0]
 461              		.loc 1 279 0
 462 0290 003090E5 		ldr	r3, [r0, #0]
 463 0294 013283E3 		orr	r3, r3, #268435456
 464 0298 003080E5 		str	r3, [r0, #0]
 465              		.loc 1 282 0
 466 029c 003091E5 		ldr	r3, [r1, #0]
 467 02a0 803083E3 		orr	r3, r3, #128
 468 02a4 003081E5 		str	r3, [r1, #0]
 469              		.loc 1 285 0
 470 02a8 003091E5 		ldr	r3, [r1, #0]
 471 02ac 033B83E3 		orr	r3, r3, #3072
 472 02b0 003081E5 		str	r3, [r1, #0]
 473              		.loc 1 286 0
 474 02b4 042042E2 		sub	r2, r2, #4
 475 02b8 003092E5 		ldr	r3, [r2, #0]
 476 02bc CF3483E3 		orr	r3, r3, #-822083584
 477 02c0 003082E5 		str	r3, [r2, #0]
 478              		.loc 1 287 0
 479 02c4 48319FE5 		ldr	r3, .L50+24
 480 02c8 032BA0E3 		mov	r2, #3072
 481 02cc 002083E5 		str	r2, [r3, #0]
 482              		.loc 1 290 0
 483 02d0 003091E5 		ldr	r3, [r1, #0]
 484 02d4 033783E3 		orr	r3, r3, #786432
 485 02d8 003081E5 		str	r3, [r1, #0]
 486              		.loc 1 293 0
 487 02dc 003091E5 		ldr	r3, [r1, #0]
 488              		.loc 1 294 0
 489 02e0 30219FE5 		ldr	r2, .L50+28
 490              		.loc 1 293 0
 491 02e4 073283E3 		orr	r3, r3, #1879048192
 492 02e8 003081E5 		str	r3, [r1, #0]
 493              		.loc 1 294 0
 494 02ec 0232A0E3 		mov	r3, #536870912
 495 02f0 003082E5 		str	r3, [r2, #0]
 496              		.loc 1 295 0
 497 02f4 033083E0 		add	r3, r3, r3
 498 02f8 003082E5 		str	r3, [r2, #0]
 499              		.loc 1 296 0
 500 02fc 0D3283E2 		add	r3, r3, #-805306368
 501 0300 003082E5 		str	r3, [r2, #0]
 502              		.loc 1 299 0
 503 0304 003090E5 		ldr	r3, [r0, #0]
 504 0308 0E36C3E3 		bic	r3, r3, #14680064
 505 030c 003080E5 		str	r3, [r0, #0]
 506              		.loc 1 301 0
 507 0310 003091E5 		ldr	r3, [r1, #0]
 508 0314 0235C3E3 		bic	r3, r3, #8388608
 509 0318 003081E5 		str	r3, [r1, #0]
 510              		.loc 1 304 0
 511 031c F8309FE5 		ldr	r3, .L50+32
 512 0320 0120A0E3 		mov	r2, #1
 513 0324 002083E5 		str	r2, [r3, #0]
 514              		.loc 1 305 0
 515 0328 F0309FE5 		ldr	r3, .L50+36
 516 032c 3020E0E3 		mvn	r2, #48
 517 0330 002083E5 		str	r2, [r3, #0]
 518              		.loc 1 306 0
 519 0334 412082E2 		add	r2, r2, #65
 520 0338 043083E2 		add	r3, r3, #4
 521 033c 002083E5 		str	r2, [r3, #0]
 522              		.loc 1 307 0
 523 0340 152082E2 		add	r2, r2, #21
 524 0344 1F3E83E2 		add	r3, r3, #496
 525 0348 002083E5 		str	r2, [r3, #0]
 526              		.loc 1 308 0
 527 034c D0209FE5 		ldr	r2, .L50+40
 528 0350 D0309FE5 		ldr	r3, .L50+44
 529 0354 002083E5 		str	r2, [r3, #0]
 530              		.loc 1 309 0
 531 0358 2420A0E3 		mov	r2, #36
 532 035c 413F83E2 		add	r3, r3, #260
 533 0360 002083E5 		str	r2, [r3, #0]
 534              		.loc 1 310 0
 535 0364 C0209FE5 		ldr	r2, .L50+48
 536 0368 013C43E2 		sub	r3, r3, #256
 537 036c 002083E5 		str	r2, [r3, #0]
 538              		.loc 1 313 0
 539 0370 B8209FE5 		ldr	r2, .L50+52
 540 0374 B8309FE5 		ldr	r3, .L50+56
 541 0378 002083E5 		str	r2, [r3, #0]
 542              		.loc 1 314 0
 543 037c B4209FE5 		ldr	r2, .L50+60
 544 0380 003092E5 		ldr	r3, [r2, #0]
 545 0384 013083E3 		orr	r3, r3, #1
 546 0388 003082E5 		str	r3, [r2, #0]
 547              		.loc 1 315 0
 548 038c A8309FE5 		ldr	r3, .L50+64
 549 0390 0010A0E3 		mov	r1, #0
 550 0394 001083E5 		str	r1, [r3, #0]
 551              		.loc 1 316 0
 552 0398 0320A0E3 		mov	r2, #3
 553 039c 5C3043E2 		sub	r3, r3, #92
 554 03a0 002083E5 		str	r2, [r3, #0]
 555              		.loc 1 317 0
 556 03a4 FA2FA0E3 		mov	r2, #1000
 557 03a8 043083E2 		add	r3, r3, #4
 558 03ac 002083E5 		str	r2, [r3, #0]
 559              		.loc 1 320 0
 560 03b0 88309FE5 		ldr	r3, .L50+68
 561 03b4 322E42E2 		sub	r2, r2, #800
 562 03b8 002083E5 		str	r2, [r3, #0]
 563              		.loc 1 321 0
 564 03bc 80209FE5 		ldr	r2, .L50+72
 565 03c0 003092E5 		ldr	r3, [r2, #0]
 566 03c4 013083E3 		orr	r3, r3, #1
 567 03c8 003082E5 		str	r3, [r2, #0]
 568              		.loc 1 322 0
 569 03cc 74309FE5 		ldr	r3, .L50+76
 570              		.loc 1 323 0
 571 03d0 0A2CA0E3 		mov	r2, #2560
 572              		.loc 1 322 0
 573 03d4 481003E4 		str	r1, [r3], #-72
 574              		.loc 1 323 0
 575 03d8 002083E5 		str	r2, [r3, #0]
 576              		.loc 1 326 0
 577 03dc 68309FE5 		ldr	r3, .L50+80
 578 03e0 272D42E2 		sub	r2, r2, #2496
 579 03e4 002083E5 		str	r2, [r3, #0]
 580              		.loc 1 327 0
 581 03e8 2020A0E3 		mov	r2, #32
 582 03ec 0C3043E2 		sub	r3, r3, #12
 583 03f0 002083E5 		str	r2, [r3, #0]
 584              		.loc 1 328 0
 585 03f4 04E09DE4 		ldr	lr, [sp], #4
 586 03f8 1EFF2FE1 		bx	lr
 587              	.L51:
 588              		.align	2
 589              	.L50:
 590 03fc 00000000 		.word	putc_serial0
 591 0400 00000000 		.word	.LC0
 592 0404 10000000 		.word	.LC1
 593 0408 088002E0 		.word	-536707064
 594 040c 04C002E0 		.word	-536690684
 595 0410 188002E0 		.word	-536707048
 596 0414 0C8002E0 		.word	-536707060
 597 0418 048002E0 		.word	-536707068
 598 041c 00C11FE0 		.word	-534789888
 599 0420 0CF0FFFF 		.word	-4084
 600 0424 50040000 		.word	timer1ISR
 601 0428 00F1FFFF 		.word	-3840
 602 042c 18050000 		.word	timer0ISR
 603 0430 DC050000 		.word	1500
 604 0434 0C4000E0 		.word	-536854516
 605 0438 044000E0 		.word	-536854524
 606 043c 704000E0 		.word	-536854416
 607 0440 0C8000E0 		.word	-536838132
 608 0444 048000E0 		.word	-536838140
 609 0448 708000E0 		.word	-536838032
 610 044c 0C0002E0 		.word	-536739828
 611              	.LFE4:
 613              		.align	2
 615              	timer1ISR:
 616              	.LFB5:
 617              		.loc 1 337 0
 618              		@ Function supports interworking.
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              	.LVL21:
 622 0450 10402DE9 		stmfd	sp!, {r4, lr}
 623              	.LCFI3:
 624              		.loc 1 338 0
 625 0454 FEFFFFEB 		bl	vs1002Config
 626 0458 210100EA 		b	.L63
 627              	.L54:
 628              		.loc 1 340 0
 629 045c FEFFFFEB 		bl	vs1002SendMusic
 630              		.loc 1 341 0
 631 0460 5C309FE5 		ldr	r3, .L65
 632 0464 2020A0E3 		mov	r2, #32
 633 0468 3D1083E2 		add	r1, r3, #61
 634 046c 340093E5 		ldr	r0, [r3, #52]
 635 0470 FEFFFFEB 		bl	fat16_read_file
 636 0474 0008A0E1 		mov	r0, r0, asl #16
 637 0478 000050E3 		cmp	r0, #0
 638 047c 44209FE5 		ldr	r2, .L65+4
 639 0480 0130A0D3 		movle	r3, #1
 640              		.loc 1 342 0
 641 0484 0030A0C3 		movgt	r3, #0
 642 0488 0030C2E5 		strb	r3, [r2, #0]
 643              	.L63:
 644              		.loc 1 339 0
 645 048c 38309FE5 		ldr	r3, .L65+8
 646 0490 003093E5 		ldr	r3, [r3, #0]
 647 0494 024613E2 		ands	r4, r3, #2097152
 648              		.loc 1 340 0
 649 0498 30009FE5 		ldr	r0, .L65+12
 650 049c 2010A0E3 		mov	r1, #32
 651              		.loc 1 339 0
 652 04a0 1501001A 		bne	.L54
 653              		.loc 1 344 0
 654 04a4 FEFFFFEB 		bl	vs1002Finish
 655              		.loc 1 345 0
 656 04a8 24209FE5 		ldr	r2, .L65+16
 657 04ac FF30A0E3 		mov	r3, #255
 658 04b0 003082E5 		str	r3, [r2, #0]
 659              		.loc 1 346 0
 660 04b4 1C309FE5 		ldr	r3, .L65+20
 661 04b8 004083E5 		str	r4, [r3, #0]
 662              		.loc 1 347 0
 663 04bc 1040BDE8 		ldmfd	sp!, {r4, lr}
 664 04c0 1EFF2FE1 		bx	lr
 665              	.L66:
 666              		.align	2
 667              	.L65:
 668 04c4 14040000 		.word	current_song
 669 04c8 01000000 		.word	song_is_over
 670 04cc 008002E0 		.word	-536707072
 671 04d0 51040000 		.word	current_song+61
 672 04d4 008000E0 		.word	-536838144
 673 04d8 30F0FFFF 		.word	-4048
 674              	.LFE5:
 676              		.align	2
 677              		.global	getButton
 679              	getButton:
 680              	.LFB7:
 681              		.loc 1 370 0
 682              		@ Function supports interworking.
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              		@ link register save eliminated.
 686              	.LVL22:
 687              		.loc 1 371 0
 688 04dc 30209FE5 		ldr	r2, .L76
 689 04e0 003092E5 		ldr	r3, [r2, #0]
 690 04e4 020513E3 		tst	r3, #8388608
 691              		.loc 1 370 0
 692              		@ lr needed for prologue
 693              		.loc 1 371 0
 694 04e8 0200A0E3 		mov	r0, #2
 695 04ec 1EFF2F01 		bxeq	lr
 696              		.loc 1 372 0
 697 04f0 003092E5 		ldr	r3, [r2, #0]
 698 04f4 020613E3 		tst	r3, #2097152
 699 04f8 0100A0E3 		mov	r0, #1
 700 04fc 1EFF2F01 		bxeq	lr
 701              		.loc 1 373 0
 702 0500 003092E5 		ldr	r3, [r2, #0]
 703 0504 010513E3 		tst	r3, #4194304
 704 0508 0000A013 		movne	r0, #0
 705 050c 0300A003 		moveq	r0, #3
 706              		.loc 1 375 0
 707 0510 1EFF2FE1 		bx	lr
 708              	.L77:
 709              		.align	2
 710              	.L76:
 711 0514 108002E0 		.word	-536707056
 712              	.LFE7:
 714              		.align	2
 716              	timer0ISR:
 717              	.LFB6:
 718              		.loc 1 355 0
 719              		@ Function supports interworking.
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              	.LVL23:
 723 0518 04E02DE5 		str	lr, [sp, #-4]!
 724              	.LCFI4:
 725              		.loc 1 356 0
 726 051c FEFFFFEB 		bl	getButton
 727 0520 78309FE5 		ldr	r3, .L87
 728 0524 0000C3E5 		strb	r0, [r3, #0]
 729              		.loc 1 357 0
 730 0528 FEFFFFEB 		bl	MMA_get_y
 731              		.loc 1 358 0
 732 052c 70309FE5 		ldr	r3, .L87+4
 733 0530 70109FE5 		ldr	r1, .L87+8
 734 0534 002093E5 		ldr	r2, [r3, #0]
 735              		.loc 1 357 0
 736 0538 6C309FE5 		ldr	r3, .L87+12
 737              		.loc 1 358 0
 738 053c 010052E1 		cmp	r2, r1
 739              		.loc 1 357 0
 740 0540 000083E5 		str	r0, [r3, #0]
 741 0544 64C09FE5 		ldr	ip, .L87+16
 742              		.loc 1 358 0
 743 0548 540100CA 		bgt	.L79
 744 054c AF0F50E3 		cmp	r0, #700
 745 0550 580100CA 		bgt	.L81
 746 0554 5A0100EA 		b	.L82
 747              	.L79:
 748 0558 AF0F52E3 		cmp	r2, #700
 749 055c 5A01000A 		beq	.L82
 750 0560 010050E1 		cmp	r0, r1
 751 0564 5A0100CA 		bgt	.L82
 752              	.L81:
 753 0568 0130A0E3 		mov	r3, #1
 754 056c 5B0100EA 		b	.L86
 755              	.L82:
 756              		.loc 1 359 0
 757 0570 0030A0E3 		mov	r3, #0
 758              	.L86:
 759 0574 0030CCE5 		strb	r3, [ip, #0]
 760              		.loc 1 361 0
 761 0578 34309FE5 		ldr	r3, .L87+20
 762 057c FF20A0E3 		mov	r2, #255
 763 0580 002083E5 		str	r2, [r3, #0]
 764              		.loc 1 360 0
 765 0584 18309FE5 		ldr	r3, .L87+4
 766 0588 000083E5 		str	r0, [r3, #0]
 767              		.loc 1 362 0
 768 058c 24309FE5 		ldr	r3, .L87+24
 769 0590 0020A0E3 		mov	r2, #0
 770 0594 002083E5 		str	r2, [r3, #0]
 771              		.loc 1 363 0
 772 0598 04E09DE4 		ldr	lr, [sp], #4
 773 059c 1EFF2FE1 		bx	lr
 774              	.L88:
 775              		.align	2
 776              	.L87:
 777 05a0 7D040000 		.word	button_pressed
 778 05a4 78040000 		.word	prev_position
 779 05a8 BB020000 		.word	699
 780 05ac 74040000 		.word	cur_position
 781 05b0 7C040000 		.word	update_screen
 782 05b4 004000E0 		.word	-536854528
 783 05b8 30F0FFFF 		.word	-4048
 784              	.LFE6:
 786              		.align	2
 787              		.global	loadSongInfo
 789              	loadSongInfo:
 790              	.LFB9:
 791              		.loc 1 402 0
 792              		@ Function supports interworking.
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 795              	.LVL24:
 796 05bc 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 797              	.LCFI5:
 798              		.loc 1 402 0
 799 05c0 0020A0E1 		mov	r2, r0
 800 05c4 0040A0E1 		mov	r4, r0
 801 05c8 0000A0E3 		mov	r0, #0
 802              	.LVL25:
 803              	.L90:
 804              	.LBB11:
 805              		.loc 1 405 0
 806 05cc 083091E5 		ldr	r3, [r1, #8]
 807 05d0 833281E0 		add	r3, r1, r3, asl #5
 808 05d4 003083E0 		add	r3, r3, r0
 809 05d8 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 810              		.loc 1 404 0
 811 05dc 010080E2 		add	r0, r0, #1
 812 05e0 1E0050E3 		cmp	r0, #30
 813              		.loc 1 405 0
 814 05e4 1630C2E5 		strb	r3, [r2, #22]
 815              		.loc 1 404 0
 816 05e8 012082E2 		add	r2, r2, #1
 817 05ec 7101001A 		bne	.L90
 818 05f0 0020A0E3 		mov	r2, #0
 819              	.LVL26:
 820              	.L92:
 821              	.LBE11:
 822              	.LBB12:
 823              		.loc 1 409 0
 824 05f4 043082E0 		add	r3, r2, r4
 825 05f8 1630D3E5 		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 826 05fc 150052E3 		cmp	r2, #21
 827 0600 2E005313 		cmpne	r3, #46
 828              		.loc 1 410 0
 829 0604 0030A003 		moveq	r3, #0
 830 0608 0230C407 		streqb	r3, [r4, r2]
 831 060c 1620A003 		moveq	r2, #22
 832              		.loc 1 413 0
 833 0610 0230C417 		strneb	r3, [r4, r2]
 834              		.loc 1 408 0
 835 0614 012082E2 		add	r2, r2, #1
 836 0618 150052E3 		cmp	r2, #21
 837 061c 7B0100DA 		ble	.L92
 838              	.LBE12:
 839              		.loc 1 416 0
 840 0620 6C609FE5 		ldr	r6, .L105
 841 0624 003096E5 		ldr	r3, [r6, #0]
 842              		.loc 1 418 0
 843 0628 165084E2 		add	r5, r4, #22
 844              		.loc 1 416 0
 845 062c 153C83E3 		orr	r3, r3, #5376
 846              		.loc 1 418 0
 847 0630 0500A0E1 		mov	r0, r5
 848              	.LVL27:
 849              		.loc 1 416 0
 850 0634 003086E5 		str	r3, [r6, #0]
 851              		.loc 1 418 0
 852 0638 FEFFFFEB 		bl	root_file_exists
 853              	.LVL28:
 854 063c 000050E3 		cmp	r0, #0
 855              		.loc 1 419 0
 856 0640 00309605 		ldreq	r3, [r6, #0]
 857 0644 FF3DC303 		biceq	r3, r3, #16320
 858 0648 3030C303 		biceq	r3, r3, #48
 859 064c 00308605 		streq	r3, [r6, #0]
 860 0650 A101000A 		beq	.L99
 861              	.L97:
 862              		.loc 1 424 0
 863 0654 0500A0E1 		mov	r0, r5
 864 0658 FEFFFFEB 		bl	root_open
 865 065c 340084E5 		str	r0, [r4, #52]
 866              		.loc 1 425 0
 867 0660 FEFFFFEB 		bl	fat16_file_size
 868              		.loc 1 426 0
 869 0664 3D1084E2 		add	r1, r4, #61
 870              		.loc 1 425 0
 871 0668 380084E5 		str	r0, [r4, #56]
 872              		.loc 1 426 0
 873 066c 2020A0E3 		mov	r2, #32
 874 0670 340094E5 		ldr	r0, [r4, #52]
 875 0674 FEFFFFEB 		bl	fat16_read_file
 876              		.loc 1 430 0
 877 0678 003096E5 		ldr	r3, [r6, #0]
 878 067c FF3DC3E3 		bic	r3, r3, #16320
 879 0680 3030C3E3 		bic	r3, r3, #48
 880 0684 003086E5 		str	r3, [r6, #0]
 881 0688 0100A0E3 		mov	r0, #1
 882              	.L99:
 883              		.loc 1 432 0
 884 068c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 885 0690 1EFF2FE1 		bx	lr
 886              	.L106:
 887              		.align	2
 888              	.L105:
 889 0694 00C002E0 		.word	-536690688
 890              	.LFE9:
 892              		.align	2
 893              		.global	closeSong
 895              	closeSong:
 896              	.LFB10:
 897              		.loc 1 437 0
 898              		@ Function supports interworking.
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901              	.LVL29:
 902 0698 10402DE9 		stmfd	sp!, {r4, lr}
 903              	.LCFI6:
 904              		.loc 1 438 0
 905 069c 28409FE5 		ldr	r4, .L109
 906 06a0 003094E5 		ldr	r3, [r4, #0]
 907 06a4 153C83E3 		orr	r3, r3, #5376
 908 06a8 003084E5 		str	r3, [r4, #0]
 909              		.loc 1 439 0
 910 06ac 340090E5 		ldr	r0, [r0, #52]
 911              	.LVL30:
 912 06b0 FEFFFFEB 		bl	fat16_close_file
 913              		.loc 1 440 0
 914 06b4 003094E5 		ldr	r3, [r4, #0]
 915 06b8 FF3DC3E3 		bic	r3, r3, #16320
 916 06bc 3030C3E3 		bic	r3, r3, #48
 917 06c0 003084E5 		str	r3, [r4, #0]
 918              		.loc 1 441 0
 919 06c4 1040BDE8 		ldmfd	sp!, {r4, lr}
 920 06c8 1EFF2FE1 		bx	lr
 921              	.L110:
 922              		.align	2
 923              	.L109:
 924 06cc 00C002E0 		.word	-536690688
 925              	.LFE10:
 927              		.align	2
 928              		.global	quickClear
 930              	quickClear:
 931              	.LFB17:
 932              		.loc 1 718 0
 933              		@ Function supports interworking.
 934              		@ args = 0, pretend = 0, frame = 0
 935              		@ frame_needed = 0, uses_anonymous_args = 0
 936              	.LVL31:
 937 06d0 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 938              	.LCFI7:
 939              		.loc 1 719 0
 940 06d4 B8209FE5 		ldr	r2, .L119
 941 06d8 003092E5 		ldr	r3, [r2, #0]
 942 06dc FF3DC3E3 		bic	r3, r3, #16320
 943 06e0 3030C3E3 		bic	r3, r3, #48
 944 06e4 003082E5 		str	r3, [r2, #0]
 945              		.loc 1 721 0
 946 06e8 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 947 06ec 00005EE3 		cmp	lr, #0
 948              		.loc 1 718 0
 949 06f0 08D04DE2 		sub	sp, sp, #8
 950              	.LCFI8:
 951              	.LVL32:
 952              		.loc 1 718 0
 953 06f4 0060A0E1 		mov	r6, r0
 954              		.loc 1 721 0
 955 06f8 C501001A 		bne	.L112
 956              	.LVL33:
 957              		.loc 1 722 0
 958 06fc 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 959 0700 0420D0E5 		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 960 0704 0E10A0E1 		mov	r1, lr
 961 0708 7B0F80E2 		add	r0, r0, #492
 962 070c 0E30A0E1 		mov	r3, lr
 963 0710 04C08DE5 		str	ip, [sp, #4]
 964 0714 00E08DE5 		str	lr, [sp, #0]
 965 0718 FEFFFFEB 		bl	LCDPrintString
 966              	.LVL34:
 967              	.L112:
 968              		.loc 1 725 0
 969 071c 0000D6E5 		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 970 0720 0010A0E3 		mov	r1, #0
 971 0724 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 972 0728 0230D6E5 		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 973 072c FEFFFFEB 		bl	LCDSetRowColor
 974 0730 0050A0E3 		mov	r5, #0
 975              	.LVL35:
 976              	.L114:
 977              	.LBB13:
 978              		.loc 1 727 0
 979 0734 8502A0E1 		mov	r0, r5, asl #5
 980 0738 0040A0E3 		mov	r4, #0
 981 073c 02C0D6E5 		ldrb	ip, [r6, #2]	@ zero_extendqisi2
 982              	.LBE13:
 983              		.loc 1 725 0
 984 0740 015085E2 		add	r5, r5, #1
 985              	.LVL36:
 986              	.LBB14:
 987              		.loc 1 727 0
 988 0744 0C0080E2 		add	r0, r0, #12
 989 0748 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 990 074c 000086E0 		add	r0, r6, r0
 991 0750 0410A0E1 		mov	r1, r4
 992 0754 0530A0E1 		mov	r3, r5
 993 0758 10108DE8 		stmia	sp, {r4, ip}	@ phole stm
 994 075c FEFFFFEB 		bl	LCDPrintString
 995              		.loc 1 728 0
 996 0760 30309FE5 		ldr	r3, .L119+4
 997 0764 0410A0E1 		mov	r1, r4
 998 0768 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 999 076c 28009FE5 		ldr	r0, .L119+8
 1000 0770 0530A0E1 		mov	r3, r5
 1001 0774 00408DE5 		str	r4, [sp, #0]
 1002 0778 04408DE5 		str	r4, [sp, #4]
 1003 077c FEFFFFEB 		bl	LCDPrintString
 1004              	.LVL37:
 1005              		.loc 1 726 0
 1006 0780 0F0055E3 		cmp	r5, #15
 1007 0784 CB01001A 		bne	.L114
 1008              	.LBE14:
 1009              		.loc 1 730 0
 1010 0788 08D08DE2 		add	sp, sp, #8
 1011 078c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1012 0790 1EFF2FE1 		bx	lr
 1013              	.L120:
 1014              		.align	2
 1015              	.L119:
 1016 0794 00C002E0 		.word	-536690688
 1017 0798 00000000 		.word	black
 1018 079c 00000000 		.word	newline
 1019              	.LFE17:
 1021              		.align	2
 1022              		.global	printMenu
 1024              	printMenu:
 1025              	.LFB12:
 1026              		.loc 1 466 0
 1027              		@ Function supports interworking.
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              	.LVL38:
 1031 07a0 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1032              	.LCFI9:
 1033              		.loc 1 467 0
 1034 07a4 C0209FE5 		ldr	r2, .L129
 1035 07a8 003092E5 		ldr	r3, [r2, #0]
 1036 07ac FF3DC3E3 		bic	r3, r3, #16320
 1037 07b0 3030C3E3 		bic	r3, r3, #48
 1038 07b4 003082E5 		str	r3, [r2, #0]
 1039              		.loc 1 468 0
 1040 07b8 06E0D0E5 		ldrb	lr, [r0, #6]	@ zero_extendqisi2
 1041 07bc 00005EE3 		cmp	lr, #0
 1042              		.loc 1 466 0
 1043 07c0 08D04DE2 		sub	sp, sp, #8
 1044              	.LCFI10:
 1045              	.LVL39:
 1046              		.loc 1 466 0
 1047 07c4 0050A0E1 		mov	r5, r0
 1048              		.loc 1 468 0
 1049 07c8 F901001A 		bne	.L122
 1050              	.LVL40:
 1051 07cc 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 1052 07d0 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 1053 07d4 0E10A0E1 		mov	r1, lr
 1054 07d8 7B0F80E2 		add	r0, r0, #492
 1055 07dc 0E30A0E1 		mov	r3, lr
 1056 07e0 04C08DE5 		str	ip, [sp, #4]
 1057 07e4 00E08DE5 		str	lr, [sp, #0]
 1058 07e8 FEFFFFEB 		bl	LCDPrintString
 1059              	.LVL41:
 1060              	.L122:
 1061 07ec 0040A0E3 		mov	r4, #0
 1062              	.LVL42:
 1063              	.L124:
 1064              	.LBB15:
 1065              		.loc 1 470 0
 1066 07f0 8402A0E1 		mov	r0, r4, asl #5
 1067 07f4 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1068 07f8 014084E2 		add	r4, r4, #1
 1069              	.LVL43:
 1070 07fc 0060A0E3 		mov	r6, #0
 1071 0800 0C0080E2 		add	r0, r0, #12
 1072 0804 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1073 0808 000085E0 		add	r0, r5, r0
 1074 080c 0610A0E1 		mov	r1, r6
 1075 0810 0430A0E1 		mov	r3, r4
 1076 0814 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1077 0818 FEFFFFEB 		bl	LCDPrintString
 1078              	.LVL44:
 1079              		.loc 1 469 0
 1080 081c 0F0054E3 		cmp	r4, #15
 1081 0820 FA01001A 		bne	.L124
 1082              	.LBE15:
 1083              		.loc 1 472 0
 1084 0824 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 1085 0828 0610A0E1 		mov	r1, r6
 1086 082c 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1087 0830 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1088 0834 FEFFFFEB 		bl	LCDSetRowColor
 1089              		.loc 1 473 0
 1090 0838 080095E5 		ldr	r0, [r5, #8]
 1091 083c 8002A0E1 		mov	r0, r0, asl #5
 1092 0840 02C0D5E5 		ldrb	ip, [r5, #2]	@ zero_extendqisi2
 1093 0844 0C0080E2 		add	r0, r0, #12
 1094 0848 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1095 084c 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1096 0850 000085E0 		add	r0, r5, r0
 1097 0854 0610A0E1 		mov	r1, r6
 1098 0858 40108DE8 		stmia	sp, {r6, ip}	@ phole stm
 1099 085c FEFFFFEB 		bl	LCDPrintString
 1100              		.loc 1 474 0
 1101 0860 08D08DE2 		add	sp, sp, #8
 1102 0864 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1103 0868 1EFF2FE1 		bx	lr
 1104              	.L130:
 1105              		.align	2
 1106              	.L129:
 1107 086c 00C002E0 		.word	-536690688
 1108              	.LFE12:
 1110              		.align	2
 1111              		.global	highlightRow
 1113              	highlightRow:
 1114              	.LFB11:
 1115              		.loc 1 447 0
 1116              		@ Function supports interworking.
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              	.LVL45:
 1120 0870 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1121              	.LCFI11:
 1122              		.loc 1 448 0
 1123 0874 D4209FE5 		ldr	r2, .L136
 1124 0878 003092E5 		ldr	r3, [r2, #0]
 1125 087c FF3DC3E3 		bic	r3, r3, #16320
 1126 0880 3030C3E3 		bic	r3, r3, #48
 1127 0884 003082E5 		str	r3, [r2, #0]
 1128              		.loc 1 447 0
 1129 0888 0050A0E1 		mov	r5, r0
 1130 088c 08D04DE2 		sub	sp, sp, #8
 1131              	.LCFI12:
 1132              	.LVL46:
 1133              		.loc 1 449 0
 1134 0890 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1135 0894 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1136              		.loc 1 447 0
 1137 0898 0140A0E1 		mov	r4, r1
 1138              		.loc 1 449 0
 1139 089c 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 1140              	.LVL47:
 1141 08a0 0010A0E3 		mov	r1, #0
 1142              	.LVL48:
 1143 08a4 FEFFFFEB 		bl	LCDSetRowColor
 1144              		.loc 1 450 0
 1145 08a8 080095E5 		ldr	r0, [r5, #8]
 1146 08ac 8002A0E1 		mov	r0, r0, asl #5
 1147 08b0 02E0D5E5 		ldrb	lr, [r5, #2]	@ zero_extendqisi2
 1148 08b4 00C0A0E3 		mov	ip, #0
 1149 08b8 0C0080E2 		add	r0, r0, #12
 1150 08bc 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1151 08c0 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1152 08c4 0C10A0E1 		mov	r1, ip
 1153 08c8 000085E0 		add	r0, r5, r0
 1154 08cc 00508DE8 		stmia	sp, {ip, lr}	@ phole stm
 1155 08d0 FEFFFFEB 		bl	LCDPrintString
 1156 08d4 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1157              		.loc 1 447 0
 1158 08d8 FF4004E2 		and	r4, r4, #255
 1159              		.loc 1 451 0
 1160 08dc 010054E3 		cmp	r4, #1
 1161              		.loc 1 452 0
 1162 08e0 010043E2 		sub	r0, r3, #1
 1163              		.loc 1 456 0
 1164 08e4 011083E2 		add	r1, r3, #1
 1165 08e8 083095E5 		ldr	r3, [r5, #8]
 1166 08ec 0010C515 		strneb	r1, [r5, #0]
 1167              		.loc 1 452 0
 1168 08f0 0000C505 		streqb	r0, [r5, #0]
 1169              		.loc 1 453 0
 1170 08f4 012043E2 		sub	r2, r3, #1
 1171              		.loc 1 457 0
 1172 08f8 013083E2 		add	r3, r3, #1
 1173              		.loc 1 453 0
 1174 08fc 08208505 		streq	r2, [r5, #8]
 1175              		.loc 1 457 0
 1176 0900 08308515 		strne	r3, [r5, #8]
 1177              		.loc 1 459 0
 1178 0904 0000D5E5 		ldrb	r0, [r5, #0]	@ zero_extendqisi2
 1179 0908 0320D5E5 		ldrb	r2, [r5, #3]	@ zero_extendqisi2
 1180 090c 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1181 0910 0010A0E3 		mov	r1, #0
 1182 0914 FEFFFFEB 		bl	LCDSetRowColor
 1183              		.loc 1 460 0
 1184 0918 080095E5 		ldr	r0, [r5, #8]
 1185 091c 8002A0E1 		mov	r0, r0, asl #5
 1186 0920 00C0A0E3 		mov	ip, #0
 1187 0924 02E0D5E5 		ldrb	lr, [r5, #2]	@ zero_extendqisi2
 1188 0928 0C0080E2 		add	r0, r0, #12
 1189 092c 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1190 0930 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1191 0934 000085E0 		add	r0, r5, r0
 1192 0938 0C10A0E1 		mov	r1, ip
 1193 093c 00508DE8 		stmia	sp, {ip, lr}	@ phole stm
 1194 0940 FEFFFFEB 		bl	LCDPrintString
 1195              		.loc 1 461 0
 1196 0944 08D08DE2 		add	sp, sp, #8
 1197 0948 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1198 094c 1EFF2FE1 		bx	lr
 1199              	.L137:
 1200              		.align	2
 1201              	.L136:
 1202 0950 00C002E0 		.word	-536690688
 1203              	.LFE11:
 1205              		.align	2
 1206              		.global	handleDownButton
 1208              	handleDownButton:
 1209              	.LFB15:
 1210              		.loc 1 529 0
 1211              		@ Function supports interworking.
 1212              		@ args = 0, pretend = 0, frame = 0
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214              	.LVL49:
 1215 0954 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1216              	.LCFI13:
 1217              		.loc 1 530 0
 1218 0958 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1219 095c 0E0053E3 		cmp	r3, #14
 1220              		.loc 1 529 0
 1221 0960 0150A0E1 		mov	r5, r1
 1222 0964 0040A0E1 		mov	r4, r0
 1223              		.loc 1 531 0
 1224 0968 0010A0E3 		mov	r1, #0
 1225              	.LVL50:
 1226              		.loc 1 530 0
 1227 096c 5C02008A 		bhi	.L139
 1228              	.LVL51:
 1229              		.loc 1 543 0
 1230 0970 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1231              		.loc 1 531 0
 1232 0974 FEFFFFEA 		b	highlightRow
 1233              	.LVL52:
 1234              	.L139:
 1235              		.loc 1 534 0
 1236 0978 0F0053E3 		cmp	r3, #15
 1237 097c 6F02001A 		bne	.L144
 1238 0980 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 1239 0984 0520D0E5 		ldrb	r2, [r0, #5]	@ zero_extendqisi2
 1240 0988 030052E1 		cmp	r2, r3
 1241              		.loc 1 536 0
 1242 098c 011083E2 		add	r1, r3, #1
 1243              		.loc 1 534 0
 1244 0990 6F02009A 		bls	.L144
 1245              	.LVL53:
 1246              		.loc 1 536 0
 1247 0994 0610C0E5 		strb	r1, [r0, #6]
 1248              		.loc 1 537 0
 1249 0998 FEFFFFEB 		bl	quickClear
 1250              	.LVL54:
 1251              		.loc 1 538 0
 1252 099c 0130A0E3 		mov	r3, #1
 1253 09a0 0030C4E5 		strb	r3, [r4, #0]
 1254              		.loc 1 539 0
 1255 09a4 0030A0E3 		mov	r3, #0
 1256 09a8 083084E5 		str	r3, [r4, #8]
 1257              		.loc 1 540 0
 1258 09ac 0510A0E1 		mov	r1, r5
 1259 09b0 14009FE5 		ldr	r0, .L145
 1260 09b4 FEFFFFEB 		bl	getNewFiles
 1261              		.loc 1 541 0
 1262 09b8 0400A0E1 		mov	r0, r4
 1263              		.loc 1 543 0
 1264 09bc 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1265              		.loc 1 541 0
 1266 09c0 FEFFFFEA 		b	printMenu
 1267              	.LVL55:
 1268              	.L144:
 1269              		.loc 1 543 0
 1270 09c4 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1271 09c8 1EFF2FE1 		bx	lr
 1272              	.L146:
 1273              		.align	2
 1274              	.L145:
 1275 09cc 10020000 		.word	file_manager
 1276              	.LFE15:
 1278              		.align	2
 1279              		.global	handleUpButton
 1281              	handleUpButton:
 1282              	.LFB14:
 1283              		.loc 1 507 0
 1284              		@ Function supports interworking.
 1285              		@ args = 0, pretend = 0, frame = 0
 1286              		@ frame_needed = 0, uses_anonymous_args = 0
 1287              	.LVL56:
 1288 09d0 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1289              	.LCFI14:
 1290              		.loc 1 508 0
 1291 09d4 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1292 09d8 010053E3 		cmp	r3, #1
 1293              		.loc 1 507 0
 1294 09dc 0150A0E1 		mov	r5, r1
 1295 09e0 0040A0E1 		mov	r4, r0
 1296              		.loc 1 509 0
 1297 09e4 0110A0E3 		mov	r1, #1
 1298              	.LVL57:
 1299              		.loc 1 508 0
 1300 09e8 7B02009A 		bls	.L148
 1301              	.LVL58:
 1302              		.loc 1 521 0
 1303 09ec 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1304              		.loc 1 509 0
 1305 09f0 FEFFFFEA 		b	highlightRow
 1306              	.LVL59:
 1307              	.L148:
 1308              		.loc 1 512 0
 1309 09f4 8C02001A 		bne	.L153
 1310 09f8 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 1311 09fc 000053E3 		cmp	r3, #0
 1312              		.loc 1 514 0
 1313 0a00 012043E2 		sub	r2, r3, #1
 1314              		.loc 1 512 0
 1315 0a04 8C02000A 		beq	.L153
 1316              	.LVL60:
 1317              		.loc 1 514 0
 1318 0a08 0620C0E5 		strb	r2, [r0, #6]
 1319              		.loc 1 515 0
 1320 0a0c FEFFFFEB 		bl	quickClear
 1321              	.LVL61:
 1322              		.loc 1 516 0
 1323 0a10 0F30A0E3 		mov	r3, #15
 1324 0a14 0030C4E5 		strb	r3, [r4, #0]
 1325              		.loc 1 517 0
 1326 0a18 0E30A0E3 		mov	r3, #14
 1327 0a1c 083084E5 		str	r3, [r4, #8]
 1328              		.loc 1 518 0
 1329 0a20 0510A0E1 		mov	r1, r5
 1330 0a24 14009FE5 		ldr	r0, .L154
 1331 0a28 FEFFFFEB 		bl	getNewFiles
 1332              		.loc 1 519 0
 1333 0a2c 0400A0E1 		mov	r0, r4
 1334              		.loc 1 521 0
 1335 0a30 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1336              		.loc 1 519 0
 1337 0a34 FEFFFFEA 		b	printMenu
 1338              	.LVL62:
 1339              	.L153:
 1340              		.loc 1 521 0
 1341 0a38 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 1342 0a3c 1EFF2FE1 		bx	lr
 1343              	.L155:
 1344              		.align	2
 1345              	.L154:
 1346 0a40 10020000 		.word	file_manager
 1347              	.LFE14:
 1349              		.section	.rodata.str1.4
 1350 0023 00       		.align	2
 1351              	.LC2:
 1352 0024 256400   		.ascii	"%d\000"
 1353 0027 00       		.align	2
 1354              	.LC3:
 1355 0028 4F6E00   		.ascii	"On\000"
 1356 002b 00       		.align	2
 1357              	.LC4:
 1358 002c 4F666600 		.ascii	"Off\000"
 1359              		.text
 1360              		.align	2
 1361              		.global	handleMiddleButton
 1363              	handleMiddleButton:
 1364              	.LFB16:
 1365              		.loc 1 553 0
 1366              		@ Function supports interworking.
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369              	.LVL63:
 1370 0a44 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1371              	.LCFI15:
 1372              		.loc 1 554 0
 1373 0a48 7C579FE5 		ldr	r5, .L227
 1374 0a4c 1030A0E3 		mov	r3, #16
 1375              		.loc 1 558 0
 1376 0a50 78879FE5 		ldr	r8, .L227+4
 1377              		.loc 1 554 0
 1378 0a54 003085E5 		str	r3, [r5, #0]
 1379              		.loc 1 553 0
 1380 0a58 08D04DE2 		sub	sp, sp, #8
 1381              	.LCFI16:
 1382              	.LVL64:
 1383              		.loc 1 555 0
 1384 0a5c FA00A0E3 		mov	r0, #250
 1385 0a60 FEFFFFEB 		bl	delay_ms
 1386              		.loc 1 558 0
 1387 0a64 006098E5 		ldr	r6, [r8, #0]
 1388 0a68 64379FE5 		ldr	r3, .L227+8
 1389 0a6c 030056E1 		cmp	r6, r3
 1390 0a70 60479FE5 		ldr	r4, .L227+12
 1391 0a74 0303001A 		bne	.L157
 1392              		.loc 1 559 0
 1393 0a78 0070D4E5 		ldrb	r7, [r4, #0]	@ zero_extendqisi2
 1394 0a7c 000057E3 		cmp	r7, #0
 1395 0a80 E402001A 		bne	.L159
 1396              		.loc 1 560 0
 1397 0a84 50079FE5 		ldr	r0, .L227+16
 1398 0a88 0610A0E1 		mov	r1, r6
 1399 0a8c FEFFFFEB 		bl	loadSongInfo
 1400              		.loc 1 561 0
 1401 0a90 000050E3 		cmp	r0, #0
 1402              		.loc 1 560 0
 1403 0a94 0050A0E1 		mov	r5, r0
 1404 0a98 0000C4E5 		strb	r0, [r4, #0]
 1405              		.loc 1 561 0
 1406 0a9c B902001A 		bne	.L161
 1407              		.loc 1 562 0
 1408 0aa0 38379FE5 		ldr	r3, .L227+20
 1409 0aa4 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 1410 0aa8 FEFFFFEB 		bl	LCDClear
 1411              		.loc 1 563 0
 1412 0aac 00508DE5 		str	r5, [sp, #0]
 1413 0ab0 003098E5 		ldr	r3, [r8, #0]
 1414 0ab4 28479FE5 		ldr	r4, .L227+24
 1415 0ab8 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1416 0abc 0020D4E5 		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1417 0ac0 0510A0E1 		mov	r1, r5
 1418 0ac4 0130A0E3 		mov	r3, #1
 1419 0ac8 18079FE5 		ldr	r0, .L227+28
 1420 0acc 04C08DE5 		str	ip, [sp, #4]
 1421 0ad0 FEFFFFEB 		bl	LCDPrintString
 1422              		.loc 1 564 0
 1423 0ad4 FA0FA0E3 		mov	r0, #1000
 1424 0ad8 FEFFFFEB 		bl	delay_ms
 1425              		.loc 1 565 0
 1426 0adc 0000D4E5 		ldrb	r0, [r4, #0]	@ zero_extendqisi2
 1427 0ae0 FEFFFFEB 		bl	LCDClear
 1428              		.loc 1 566 0
 1429 0ae4 0600A0E1 		mov	r0, r6
 1430 0ae8 690400EA 		b	.L226
 1431              	.L161:
 1432              		.loc 1 569 0
 1433 0aec FEFFFFEB 		bl	vs1002Config
 1434              		.loc 1 570 0
 1435 0af0 0700A0E1 		mov	r0, r7
 1436 0af4 021BA0E3 		mov	r1, #2048
 1437 0af8 FEFFFFEB 		bl	vs1002SCIWrite
 1438              		.loc 1 571 0
 1439 0afc FEFFFFEB 		bl	vs1002Finish
 1440              		.loc 1 572 0
 1441 0b00 E4369FE5 		ldr	r3, .L227+32
 1442 0b04 0222A0E3 		mov	r2, #536870912
 1443 0b08 002083E5 		str	r2, [r3, #0]
 1444              		.loc 1 574 0
 1445 0b0c FEFFFFEB 		bl	vs1002Config
 1446 0b10 CF0200EA 		b	.L220
 1447              	.L165:
 1448              		.loc 1 576 0
 1449 0b14 FEFFFFEB 		bl	vs1002SendMusic
 1450              		.loc 1 577 0
 1451 0b18 BC369FE5 		ldr	r3, .L227+16
 1452 0b1c 2020A0E3 		mov	r2, #32
 1453 0b20 3D1083E2 		add	r1, r3, #61
 1454 0b24 340093E5 		ldr	r0, [r3, #52]
 1455 0b28 FEFFFFEB 		bl	fat16_read_file
 1456 0b2c 0008A0E1 		mov	r0, r0, asl #16
 1457 0b30 000050E3 		cmp	r0, #0
 1458 0b34 B4269FE5 		ldr	r2, .L227+36
 1459 0b38 0130A0D3 		movle	r3, #1
 1460              		.loc 1 578 0
 1461 0b3c 0030A0C3 		movgt	r3, #0
 1462 0b40 0030C2E5 		strb	r3, [r2, #0]
 1463              	.L220:
 1464              		.loc 1 575 0
 1465 0b44 A8369FE5 		ldr	r3, .L227+40
 1466 0b48 003093E5 		ldr	r3, [r3, #0]
 1467 0b4c 020613E3 		tst	r3, #2097152
 1468              		.loc 1 576 0
 1469 0b50 A0069FE5 		ldr	r0, .L227+44
 1470 0b54 2010A0E3 		mov	r1, #32
 1471              		.loc 1 575 0
 1472 0b58 C302001A 		bne	.L165
 1473              		.loc 1 580 0
 1474 0b5c FEFFFFEB 		bl	vs1002Finish
 1475              		.loc 1 581 0
 1476 0b60 94269FE5 		ldr	r2, .L227+48
 1477 0b64 003092E5 		ldr	r3, [r2, #0]
 1478 0b68 033B83E3 		orr	r3, r3, #3072
 1479 0b6c 003082E5 		str	r3, [r2, #0]
 1480              		.loc 1 582 0
 1481 0b70 88269FE5 		ldr	r2, .L227+52
 1482 0b74 003092E5 		ldr	r3, [r2, #0]
 1483 0b78 203083E3 		orr	r3, r3, #32
 1484 0b7c 003082E5 		str	r3, [r2, #0]
 1485              		.loc 1 583 0
 1486 0b80 7C269FE5 		ldr	r2, .L227+56
 1487 0b84 003092E5 		ldr	r3, [r2, #0]
 1488 0b88 033783E3 		orr	r3, r3, #786432
 1489 0b8c 503083E3 		orr	r3, r3, #80
 1490 0b90 003082E5 		str	r3, [r2, #0]
 1491 0b94 6A0400EA 		b	.L163
 1492              	.L159:
 1493              		.loc 1 587 0
 1494 0b98 2030A0E3 		mov	r3, #32
 1495 0b9c 003085E5 		str	r3, [r5, #0]
 1496              		.loc 1 588 0
 1497 0ba0 60369FE5 		ldr	r3, .L227+60
 1498 0ba4 0222A0E3 		mov	r2, #536870912
 1499 0ba8 002083E5 		str	r2, [r3, #0]
 1500              		.loc 1 589 0
 1501 0bac FEFFFFEB 		bl	vs1002Config
 1502              		.loc 1 590 0
 1503 0bb0 0000A0E3 		mov	r0, #0
 1504 0bb4 0810A0E3 		mov	r1, #8
 1505 0bb8 FEFFFFEB 		bl	vs1002SCIWrite
 1506 0bbc 0040A0E3 		mov	r4, #0
 1507              	.LVL65:
 1508              	.L169:
 1509              	.LBB16:
 1510              		.loc 1 591 0
 1511 0bc0 0000A0E3 		mov	r0, #0
 1512 0bc4 014084E2 		add	r4, r4, #1
 1513 0bc8 0010A0E1 		mov	r1, r0
 1514 0bcc FEFFFFEB 		bl	vs1002SCIWrite
 1515 0bd0 960054E3 		cmp	r4, #150
 1516 0bd4 EE02001A 		bne	.L169
 1517              	.LBE16:
 1518              		.loc 1 592 0
 1519 0bd8 FEFFFFEB 		bl	vs1002Finish
 1520              		.loc 1 593 0
 1521 0bdc 20269FE5 		ldr	r2, .L227+56
 1522 0be0 003092E5 		ldr	r3, [r2, #0]
 1523 0be4 033783E3 		orr	r3, r3, #786432
 1524 0be8 503083E3 		orr	r3, r3, #80
 1525 0bec 003082E5 		str	r3, [r2, #0]
 1526              		.loc 1 594 0
 1527 0bf0 E4059FE5 		ldr	r0, .L227+16
 1528 0bf4 FEFFFFEB 		bl	closeSong
 1529              		.loc 1 595 0
 1530 0bf8 D8359FE5 		ldr	r3, .L227+12
 1531 0bfc 0020A0E3 		mov	r2, #0
 1532 0c00 0020C3E5 		strb	r2, [r3, #0]
 1533              		.loc 1 596 0
 1534 0c04 F4359FE5 		ldr	r3, .L227+52
 1535 0c08 102082E2 		add	r2, r2, #16
 1536 0c0c 002083E5 		str	r2, [r3, #0]
 1537 0c10 6A0400EA 		b	.L163
 1538              	.LVL66:
 1539              	.L157:
 1540              		.loc 1 602 0
 1541 0c14 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 1542 0c18 000053E3 		cmp	r3, #0
 1543 0c1c 0903000A 		beq	.L171
 1544 0c20 0600A0E1 		mov	r0, r6
 1545 0c24 FEFFFFEB 		bl	quickClear
 1546 0c28 0C0300EA 		b	.L173
 1547              	.L171:
 1548              		.loc 1 603 0
 1549 0c2c D8359FE5 		ldr	r3, .L227+64
 1550 0c30 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 1551 0c34 FEFFFFEB 		bl	LCDClear
 1552              	.L173:
 1553              		.loc 1 604 0
 1554 0c38 90759FE5 		ldr	r7, .L227+4
 1555 0c3c 003097E5 		ldr	r3, [r7, #0]
 1556 0c40 0050A0E3 		mov	r5, #0
 1557 0c44 080093E5 		ldr	r0, [r3, #8]
 1558 0c48 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1559 0c4c 00508DE5 		str	r5, [sp, #0]
 1560 0c50 8002A0E1 		mov	r0, r0, asl #5
 1561 0c54 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1562              		.loc 1 605 0
 1563 0c58 A0659FE5 		ldr	r6, .L227+52
 1564              		.loc 1 604 0
 1565 0c5c 0C0080E2 		add	r0, r0, #12
 1566 0c60 000083E0 		add	r0, r3, r0
 1567 0c64 0510A0E1 		mov	r1, r5
 1568 0c68 0130A0E3 		mov	r3, #1
 1569 0c6c 04C08DE5 		str	ip, [sp, #4]
 1570 0c70 FEFFFFEB 		bl	LCDPrintString
 1571              		.loc 1 605 0
 1572 0c74 003096E5 		ldr	r3, [r6, #0]
 1573 0c78 103083E3 		orr	r3, r3, #16
 1574 0c7c 003086E5 		str	r3, [r6, #0]
 1575              		.loc 1 606 0
 1576 0c80 002097E5 		ldr	r2, [r7, #0]
 1577 0c84 0040D2E5 		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 1578 0c88 010054E3 		cmp	r4, #1
 1579 0c8c 7F03001A 		bne	.L174
 1580              		.loc 1 607 0
 1581 0c90 003096E5 		ldr	r3, [r6, #0]
 1582 0c94 103083E3 		orr	r3, r3, #16
 1583 0c98 003086E5 		str	r3, [r6, #0]
 1584              		.loc 1 608 0
 1585 0c9c 0510A0E1 		mov	r1, r5
 1586 0ca0 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1587 0ca4 0200A0E3 		mov	r0, #2
 1588 0ca8 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1589 0cac FEFFFFEB 		bl	LCDSetRowColor
 1590              		.loc 1 609 0
 1591 0cb0 00508DE5 		str	r5, [sp, #0]
 1592 0cb4 24359FE5 		ldr	r3, .L227+20
 1593 0cb8 001097E5 		ldr	r1, [r7, #0]
 1594 0cbc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1595 0cc0 48359FE5 		ldr	r3, .L227+68
 1596 0cc4 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1597 0cc8 44059FE5 		ldr	r0, .L227+72
 1598 0ccc 001093E5 		ldr	r1, [r3, #0]
 1599 0cd0 0230A0E3 		mov	r3, #2
 1600 0cd4 04C08DE5 		str	ip, [sp, #4]
 1601 0cd8 FEFFFFEB 		bl	LCDPrintString
 1602 0cdc 770300EA 		b	.L176
 1603              	.L177:
 1604              		.loc 1 611 0
 1605 0ce0 E4349FE5 		ldr	r3, .L227
 1606 0ce4 1020A0E3 		mov	r2, #16
 1607 0ce8 002083E5 		str	r2, [r3, #0]
 1608              		.loc 1 612 0
 1609 0cec FEFFFFEB 		bl	delay_ms
 1610              		.loc 1 613 0
 1611 0cf0 0040D4E5 		ldrb	r4, [r4, #0]	@ zero_extendqisi2
 1612 0cf4 020054E3 		cmp	r4, #2
 1613 0cf8 5503001A 		bne	.L178
 1614              		.loc 1 614 0
 1615 0cfc 003095E5 		ldr	r3, [r5, #0]
 1616 0d00 1F0053E3 		cmp	r3, #31
 1617              		.loc 1 615 0
 1618 0d04 012083E2 		add	r2, r3, #1
 1619              		.loc 1 614 0
 1620 0d08 460300CA 		bgt	.L180
 1621              		.loc 1 615 0
 1622 0d0c 002085E5 		str	r2, [r5, #0]
 1623              		.loc 1 616 0
 1624 0d10 FEFFFFEB 		bl	vs1002Config
 1625              		.loc 1 617 0
 1626 0d14 3100A0E3 		mov	r0, #49
 1627 0d18 FEFFFFEB 		bl	vs1002SetVolume
 1628              		.loc 1 618 0
 1629 0d1c FEFFFFEB 		bl	vs1002Finish
 1630              	.L180:
 1631              		.loc 1 620 0
 1632 0d20 002096E5 		ldr	r2, [r6, #0]
 1633 0d24 0400A0E1 		mov	r0, r4
 1634 0d28 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1635 0d2c 0010A0E3 		mov	r1, #0
 1636 0d30 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1637 0d34 FEFFFFEB 		bl	LCDSetRowColor
 1638              		.loc 1 621 0
 1639 0d38 001096E5 		ldr	r1, [r6, #0]
 1640 0d3c 0030A0E3 		mov	r3, #0
 1641 0d40 0320D1E5 		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1642 0d44 00308DE5 		str	r3, [sp, #0]
 1643 0d48 C4049FE5 		ldr	r0, .L227+72
 1644 0d4c 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1645 0d50 001095E5 		ldr	r1, [r5, #0]
 1646 0d54 0430A0E1 		mov	r3, r4
 1647 0d58 710300EA 		b	.L222
 1648              	.L178:
 1649              		.loc 1 623 0
 1650 0d5c 010054E3 		cmp	r4, #1
 1651              		.loc 1 630 0
 1652 0d60 68649FE5 		ldr	r6, .L227+4
 1653              		.loc 1 624 0
 1654 0d64 A4549FE5 		ldr	r5, .L227+68
 1655              		.loc 1 623 0
 1656 0d68 7303001A 		bne	.L182
 1657              		.loc 1 624 0
 1658 0d6c 003095E5 		ldr	r3, [r5, #0]
 1659 0d70 000053E3 		cmp	r3, #0
 1660              		.loc 1 625 0
 1661 0d74 012043E2 		sub	r2, r3, #1
 1662              		.loc 1 624 0
 1663 0d78 620300BA 		blt	.L184
 1664              		.loc 1 625 0
 1665 0d7c 002085E5 		str	r2, [r5, #0]
 1666              		.loc 1 626 0
 1667 0d80 FEFFFFEB 		bl	vs1002Config
 1668              		.loc 1 627 0
 1669 0d84 3000A0E3 		mov	r0, #48
 1670 0d88 FEFFFFEB 		bl	vs1002SetVolume
 1671              		.loc 1 628 0
 1672 0d8c FEFFFFEB 		bl	vs1002Finish
 1673              	.L184:
 1674              		.loc 1 630 0
 1675 0d90 002096E5 		ldr	r2, [r6, #0]
 1676 0d94 0200A0E3 		mov	r0, #2
 1677 0d98 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1678 0d9c 0010A0E3 		mov	r1, #0
 1679 0da0 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1680 0da4 FEFFFFEB 		bl	LCDSetRowColor
 1681              		.loc 1 631 0
 1682 0da8 0030A0E3 		mov	r3, #0
 1683 0dac 00308DE5 		str	r3, [sp, #0]
 1684 0db0 001096E5 		ldr	r1, [r6, #0]
 1685 0db4 24349FE5 		ldr	r3, .L227+20
 1686 0db8 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1687 0dbc 50049FE5 		ldr	r0, .L227+72
 1688 0dc0 001095E5 		ldr	r1, [r5, #0]
 1689 0dc4 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1690 0dc8 0230A0E3 		mov	r3, #2
 1691              	.L222:
 1692 0dcc 04C08DE5 		str	ip, [sp, #4]
 1693 0dd0 FEFFFFEB 		bl	LCDPrintString
 1694              	.L182:
 1695              		.loc 1 633 0
 1696 0dd4 24249FE5 		ldr	r2, .L227+52
 1697 0dd8 003092E5 		ldr	r3, [r2, #0]
 1698 0ddc 103083E3 		orr	r3, r3, #16
 1699 0de0 003082E5 		str	r3, [r2, #0]
 1700              	.L176:
 1701              		.loc 1 610 0
 1702 0de4 2C449FE5 		ldr	r4, .L227+76
 1703 0de8 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 1704 0dec 020053E3 		cmp	r3, #2
 1705              		.loc 1 620 0
 1706 0df0 D8639FE5 		ldr	r6, .L227+4
 1707              		.loc 1 614 0
 1708 0df4 14549FE5 		ldr	r5, .L227+68
 1709              		.loc 1 612 0
 1710 0df8 9600A0E3 		mov	r0, #150
 1711              		.loc 1 610 0
 1712 0dfc 3603009A 		bls	.L177
 1713 0e00 5C0400EA 		b	.L186
 1714              	.L174:
 1715              		.loc 1 636 0
 1716 0e04 030054E3 		cmp	r4, #3
 1717 0e08 E803001A 		bne	.L187
 1718              		.loc 1 637 0
 1719 0e0c 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1720 0e10 0200A0E3 		mov	r0, #2
 1721 0e14 0010A0E3 		mov	r1, #0
 1722 0e18 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1723 0e1c FEFFFFEB 		bl	LCDSetRowColor
 1724              		.loc 1 638 0
 1725 0e20 00508DE5 		str	r5, [sp, #0]
 1726 0e24 B4339FE5 		ldr	r3, .L227+20
 1727 0e28 001097E5 		ldr	r1, [r7, #0]
 1728 0e2c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1729 0e30 E4339FE5 		ldr	r3, .L227+80
 1730 0e34 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1731 0e38 D4039FE5 		ldr	r0, .L227+72
 1732 0e3c 001093E5 		ldr	r1, [r3, #0]
 1733 0e40 0230A0E3 		mov	r3, #2
 1734 0e44 04C08DE5 		str	ip, [sp, #4]
 1735 0e48 FEFFFFEB 		bl	LCDPrintString
 1736              		.loc 1 640 0
 1737 0e4c 003096E5 		ldr	r3, [r6, #0]
 1738              		.loc 1 639 0
 1739 0e50 C0239FE5 		ldr	r2, .L227+76
 1740              		.loc 1 640 0
 1741 0e54 103083E3 		orr	r3, r3, #16
 1742              		.loc 1 639 0
 1743 0e58 0050C2E5 		strb	r5, [r2, #0]
 1744              		.loc 1 640 0
 1745 0e5c 003086E5 		str	r3, [r6, #0]
 1746 0e60 D40300EA 		b	.L189
 1747              	.L190:
 1748              		.loc 1 642 0
 1749 0e64 60339FE5 		ldr	r3, .L227
 1750 0e68 1020A0E3 		mov	r2, #16
 1751 0e6c 002083E5 		str	r2, [r3, #0]
 1752              		.loc 1 643 0
 1753 0e70 FEFFFFEB 		bl	delay_ms
 1754              		.loc 1 644 0
 1755 0e74 0040D4E5 		ldrb	r4, [r4, #0]	@ zero_extendqisi2
 1756 0e78 020054E3 		cmp	r4, #2
 1757              		.loc 1 647 0
 1758 0e7c 0010A0E3 		mov	r1, #0
 1759 0e80 0400A0E1 		mov	r0, r4
 1760              		.loc 1 644 0
 1761 0e84 B303001A 		bne	.L191
 1762              		.loc 1 646 0
 1763 0e88 002095E5 		ldr	r2, [r5, #0]
 1764 0e8c 8C339FE5 		ldr	r3, .L227+84
 1765 0e90 030052E1 		cmp	r2, r3
 1766 0e94 022082E2 		add	r2, r2, #2
 1767              		.loc 1 647 0
 1768 0e98 00C096E5 		ldr	ip, [r6, #0]
 1769              		.loc 1 646 0
 1770 0e9c 002085D5 		strle	r2, [r5, #0]
 1771              		.loc 1 647 0
 1772 0ea0 0230DCE5 		ldrb	r3, [ip, #2]	@ zero_extendqisi2
 1773 0ea4 0420DCE5 		ldrb	r2, [ip, #4]	@ zero_extendqisi2
 1774 0ea8 FEFFFFEB 		bl	LCDSetRowColor
 1775              		.loc 1 648 0
 1776 0eac 0030A0E3 		mov	r3, #0
 1777 0eb0 00308DE5 		str	r3, [sp, #0]
 1778 0eb4 24339FE5 		ldr	r3, .L227+20
 1779 0eb8 001096E5 		ldr	r1, [r6, #0]
 1780 0ebc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1781 0ec0 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1782 0ec4 48039FE5 		ldr	r0, .L227+72
 1783 0ec8 001095E5 		ldr	r1, [r5, #0]
 1784 0ecc 0430A0E1 		mov	r3, r4
 1785 0ed0 CB0300EA 		b	.L223
 1786              	.L191:
 1787              		.loc 1 650 0
 1788 0ed4 010054E3 		cmp	r4, #1
 1789              		.loc 1 653 0
 1790 0ed8 F0629FE5 		ldr	r6, .L227+4
 1791 0edc 0200A0E3 		mov	r0, #2
 1792 0ee0 0010A0E3 		mov	r1, #0
 1793              		.loc 1 652 0
 1794 0ee4 30539FE5 		ldr	r5, .L227+80
 1795              		.loc 1 650 0
 1796 0ee8 CD03001A 		bne	.L195
 1797              		.loc 1 652 0
 1798 0eec 002095E5 		ldr	r2, [r5, #0]
 1799 0ef0 2C339FE5 		ldr	r3, .L227+88
 1800 0ef4 030052E1 		cmp	r2, r3
 1801 0ef8 022042E2 		sub	r2, r2, #2
 1802              		.loc 1 653 0
 1803 0efc 00C096E5 		ldr	ip, [r6, #0]
 1804              		.loc 1 652 0
 1805 0f00 002085C5 		strgt	r2, [r5, #0]
 1806              		.loc 1 653 0
 1807 0f04 0230DCE5 		ldrb	r3, [ip, #2]	@ zero_extendqisi2
 1808 0f08 0420DCE5 		ldrb	r2, [ip, #4]	@ zero_extendqisi2
 1809 0f0c FEFFFFEB 		bl	LCDSetRowColor
 1810              		.loc 1 654 0
 1811 0f10 0030A0E3 		mov	r3, #0
 1812 0f14 00308DE5 		str	r3, [sp, #0]
 1813 0f18 001096E5 		ldr	r1, [r6, #0]
 1814 0f1c BC329FE5 		ldr	r3, .L227+20
 1815 0f20 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1816 0f24 E8029FE5 		ldr	r0, .L227+72
 1817 0f28 001095E5 		ldr	r1, [r5, #0]
 1818 0f2c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1819 0f30 0230A0E3 		mov	r3, #2
 1820              	.L223:
 1821 0f34 04C08DE5 		str	ip, [sp, #4]
 1822 0f38 FEFFFFEB 		bl	LCDPrintString
 1823              	.L195:
 1824              		.loc 1 656 0
 1825 0f3c D8329FE5 		ldr	r3, .L227+80
 1826 0f40 000093E5 		ldr	r0, [r3, #0]
 1827 0f44 FEFFFFEB 		bl	ns73SetChannel
 1828              		.loc 1 657 0
 1829 0f48 B0229FE5 		ldr	r2, .L227+52
 1830 0f4c 003092E5 		ldr	r3, [r2, #0]
 1831 0f50 103083E3 		orr	r3, r3, #16
 1832 0f54 003082E5 		str	r3, [r2, #0]
 1833              	.L189:
 1834              		.loc 1 641 0
 1835 0f58 B8429FE5 		ldr	r4, .L227+76
 1836 0f5c 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 1837 0f60 020053E3 		cmp	r3, #2
 1838              		.loc 1 647 0
 1839 0f64 64629FE5 		ldr	r6, .L227+4
 1840              		.loc 1 646 0
 1841 0f68 AC529FE5 		ldr	r5, .L227+80
 1842              		.loc 1 643 0
 1843 0f6c 6400A0E3 		mov	r0, #100
 1844              		.loc 1 641 0
 1845 0f70 9703009A 		bls	.L190
 1846              		.loc 1 659 0
 1847 0f74 AC229FE5 		ldr	r2, .L227+92
 1848 0f78 003092E5 		ldr	r3, [r2, #0]
 1849 0f7c 013283E3 		orr	r3, r3, #268435456
 1850 0f80 003082E5 		str	r3, [r2, #0]
 1851              		.loc 1 660 0
 1852 0f84 FEFFFFEB 		bl	delay_ms
 1853              		.loc 1 661 0
 1854 0f88 FEFFFFEB 		bl	ns73Config
 1855              		.loc 1 662 0
 1856 0f8c 000095E5 		ldr	r0, [r5, #0]
 1857 0f90 FEFFFFEB 		bl	ns73SetChannel
 1858              		.loc 1 663 0
 1859 0f94 90229FE5 		ldr	r2, .L227+96
 1860 0f98 003092E5 		ldr	r3, [r2, #0]
 1861 0f9c 013283E3 		orr	r3, r3, #268435456
 1862 0fa0 003082E5 		str	r3, [r2, #0]
 1863 0fa4 5C0400EA 		b	.L186
 1864              	.L187:
 1865              		.loc 1 665 0
 1866 0fa8 020054E3 		cmp	r4, #2
 1867 0fac 5C04001A 		bne	.L186
 1868              		.loc 1 666 0
 1869 0fb0 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1870 0fb4 0010A0E3 		mov	r1, #0
 1871 0fb8 0400A0E1 		mov	r0, r4
 1872 0fbc 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1873 0fc0 FEFFFFEB 		bl	LCDSetRowColor
 1874              		.loc 1 667 0
 1875 0fc4 64329FE5 		ldr	r3, .L227+100
 1876 0fc8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1877 0fcc 000053E3 		cmp	r3, #0
 1878 0fd0 001097E5 		ldr	r1, [r7, #0]
 1879 0fd4 FB03000A 		beq	.L201
 1880 0fd8 0320D1E5 		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1881 0fdc 00508DE5 		str	r5, [sp, #0]
 1882 0fe0 4C029FE5 		ldr	r0, .L227+104
 1883 0fe4 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1884 0fe8 0430A0E1 		mov	r3, r4
 1885 0fec 0510A0E1 		mov	r1, r5
 1886 0ff0 010400EA 		b	.L224
 1887              	.L201:
 1888              		.loc 1 668 0
 1889 0ff4 0320D1E5 		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1890 0ff8 00308DE5 		str	r3, [sp, #0]
 1891 0ffc 34029FE5 		ldr	r0, .L227+108
 1892 1000 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1893 1004 0310A0E1 		mov	r1, r3
 1894 1008 0430A0E1 		mov	r3, r4
 1895              	.L224:
 1896 100c 04C08DE5 		str	ip, [sp, #4]
 1897 1010 FEFFFFEB 		bl	LCDPrintString
 1898              		.loc 1 670 0
 1899 1014 E4019FE5 		ldr	r0, .L227+52
 1900 1018 002090E5 		ldr	r2, [r0, #0]
 1901              		.loc 1 669 0
 1902 101c F4319FE5 		ldr	r3, .L227+76
 1903              		.loc 1 670 0
 1904 1020 102082E3 		orr	r2, r2, #16
 1905              		.loc 1 669 0
 1906 1024 0010A0E3 		mov	r1, #0
 1907 1028 0010C3E5 		strb	r1, [r3, #0]
 1908              		.loc 1 670 0
 1909 102c 002080E5 		str	r2, [r0, #0]
 1910 1030 550400EA 		b	.L204
 1911              	.L205:
 1912              		.loc 1 672 0
 1913 1034 90319FE5 		ldr	r3, .L227
 1914 1038 1020A0E3 		mov	r2, #16
 1915 103c 002083E5 		str	r2, [r3, #0]
 1916              		.loc 1 673 0
 1917 1040 FEFFFFEB 		bl	delay_ms
 1918              		.loc 1 674 0
 1919 1044 0040D4E5 		ldrb	r4, [r4, #0]	@ zero_extendqisi2
 1920 1048 020054E3 		cmp	r4, #2
 1921              		.loc 1 677 0
 1922 104c 0010A0E3 		mov	r1, #0
 1923 1050 0400A0E1 		mov	r0, r4
 1924              		.loc 1 674 0
 1925 1054 2E04001A 		bne	.L206
 1926              		.loc 1 676 0
 1927 1058 D0319FE5 		ldr	r3, .L227+100
 1928 105c 0120A0E3 		mov	r2, #1
 1929 1060 0020C3E5 		strb	r2, [r3, #0]
 1930              		.loc 1 677 0
 1931 1064 002096E5 		ldr	r2, [r6, #0]
 1932 1068 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1933 106c 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1934 1070 FEFFFFEB 		bl	LCDSetRowColor
 1935              		.loc 1 678 0
 1936 1074 003096E5 		ldr	r3, [r6, #0]
 1937 1078 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1938 107c 00508DE5 		str	r5, [sp, #0]
 1939 1080 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1940 1084 0510A0E1 		mov	r1, r5
 1941 1088 0430A0E1 		mov	r3, r4
 1942 108c A0019FE5 		ldr	r0, .L227+104
 1943 1090 04C08DE5 		str	ip, [sp, #4]
 1944 1094 FEFFFFEB 		bl	LCDPrintString
 1945              		.loc 1 680 0
 1946 1098 88219FE5 		ldr	r2, .L227+92
 1947 109c 003092E5 		ldr	r3, [r2, #0]
 1948 10a0 013283E3 		orr	r3, r3, #268435456
 1949              		.loc 1 681 0
 1950 10a4 6400A0E3 		mov	r0, #100
 1951              		.loc 1 680 0
 1952 10a8 003082E5 		str	r3, [r2, #0]
 1953              		.loc 1 681 0
 1954 10ac FEFFFFEB 		bl	delay_ms
 1955              		.loc 1 682 0
 1956 10b0 FEFFFFEB 		bl	ns73Config
 1957              		.loc 1 683 0
 1958 10b4 0500A0E1 		mov	r0, r5
 1959 10b8 8110A0E3 		mov	r1, #129
 1960 10bc 4C0400EA 		b	.L225
 1961              	.L206:
 1962              		.loc 1 689 0
 1963 10c0 0050A0E3 		mov	r5, #0
 1964              		.loc 1 687 0
 1965 10c4 010054E3 		cmp	r4, #1
 1966              		.loc 1 690 0
 1967 10c8 00619FE5 		ldr	r6, .L227+4
 1968 10cc 0200A0E3 		mov	r0, #2
 1969 10d0 0510A0E1 		mov	r1, r5
 1970              		.loc 1 687 0
 1971 10d4 5104001A 		bne	.L208
 1972              		.loc 1 689 0
 1973 10d8 50319FE5 		ldr	r3, .L227+100
 1974              		.loc 1 690 0
 1975 10dc 002096E5 		ldr	r2, [r6, #0]
 1976              		.loc 1 689 0
 1977 10e0 0050C3E5 		strb	r5, [r3, #0]
 1978              		.loc 1 690 0
 1979 10e4 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1980 10e8 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1981 10ec FEFFFFEB 		bl	LCDSetRowColor
 1982              		.loc 1 691 0
 1983 10f0 003096E5 		ldr	r3, [r6, #0]
 1984 10f4 0320D3E5 		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1985 10f8 00508DE5 		str	r5, [sp, #0]
 1986 10fc 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 1987 1100 0510A0E1 		mov	r1, r5
 1988 1104 0230A0E3 		mov	r3, #2
 1989 1108 28019FE5 		ldr	r0, .L227+108
 1990 110c 04C08DE5 		str	ip, [sp, #4]
 1991 1110 FEFFFFEB 		bl	LCDPrintString
 1992              		.loc 1 693 0
 1993 1114 0C219FE5 		ldr	r2, .L227+92
 1994 1118 003092E5 		ldr	r3, [r2, #0]
 1995 111c 013283E3 		orr	r3, r3, #268435456
 1996              		.loc 1 694 0
 1997 1120 6400A0E3 		mov	r0, #100
 1998              		.loc 1 693 0
 1999 1124 003082E5 		str	r3, [r2, #0]
 2000              		.loc 1 694 0
 2001 1128 FEFFFFEB 		bl	delay_ms
 2002              		.loc 1 695 0
 2003 112c FEFFFFEB 		bl	ns73Config
 2004              		.loc 1 696 0
 2005 1130 0500A0E1 		mov	r0, r5
 2006 1134 0410A0E3 		mov	r1, #4
 2007              	.L225:
 2008 1138 FEFFFFEB 		bl	ns73Send
 2009              		.loc 1 697 0
 2010 113c E8209FE5 		ldr	r2, .L227+96
 2011 1140 003092E5 		ldr	r3, [r2, #0]
 2012 1144 013283E3 		orr	r3, r3, #268435456
 2013 1148 003082E5 		str	r3, [r2, #0]
 2014              	.L208:
 2015              		.loc 1 700 0
 2016 114c AC209FE5 		ldr	r2, .L227+52
 2017 1150 003092E5 		ldr	r3, [r2, #0]
 2018 1154 103083E3 		orr	r3, r3, #16
 2019 1158 003082E5 		str	r3, [r2, #0]
 2020              	.L204:
 2021              		.loc 1 671 0
 2022 115c B4409FE5 		ldr	r4, .L227+76
 2023 1160 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 2024 1164 020053E3 		cmp	r3, #2
 2025              		.loc 1 677 0
 2026 1168 60609FE5 		ldr	r6, .L227+4
 2027              		.loc 1 678 0
 2028 116c 0050A0E3 		mov	r5, #0
 2029              		.loc 1 673 0
 2030 1170 6400A0E3 		mov	r0, #100
 2031              		.loc 1 671 0
 2032 1174 0B04009A 		bls	.L205
 2033              	.L186:
 2034              		.loc 1 703 0
 2035 1178 58309FE5 		ldr	r3, .L227+12
 2036 117c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2037 1180 000053E3 		cmp	r3, #0
 2038 1184 44009FE5 		ldr	r0, .L227+4
 2039 1188 6404000A 		beq	.L210
 2040 118c 000090E5 		ldr	r0, [r0, #0]
 2041 1190 FEFFFFEB 		bl	quickClear
 2042 1194 670400EA 		b	.L212
 2043              	.L210:
 2044              		.loc 1 704 0
 2045 1198 003090E5 		ldr	r3, [r0, #0]
 2046 119c 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2047 11a0 FEFFFFEB 		bl	LCDClear
 2048              	.L212:
 2049              		.loc 1 705 0
 2050 11a4 24309FE5 		ldr	r3, .L227+4
 2051 11a8 000093E5 		ldr	r0, [r3, #0]
 2052              	.L226:
 2053 11ac FEFFFFEB 		bl	printMenu
 2054              	.LVL67:
 2055              	.L163:
 2056              		.loc 1 707 0
 2057 11b0 48209FE5 		ldr	r2, .L227+52
 2058 11b4 003092E5 		ldr	r3, [r2, #0]
 2059 11b8 103083E3 		orr	r3, r3, #16
 2060 11bc 003082E5 		str	r3, [r2, #0]
 2061              		.loc 1 708 0
 2062 11c0 08D08DE2 		add	sp, sp, #8
 2063 11c4 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 2064 11c8 1EFF2FE1 		bx	lr
 2065              	.L228:
 2066              		.align	2
 2067              	.L227:
 2068 11cc 14F0FFFF 		.word	-4076
 2069 11d0 08000000 		.word	current_display
 2070 11d4 10020000 		.word	file_manager
 2071 11d8 02000000 		.word	file_is_open
 2072 11dc 14040000 		.word	current_song
 2073 11e0 00000000 		.word	white
 2074 11e4 00000000 		.word	black
 2075 11e8 00000000 		.word	NotFound
 2076 11ec 0C8002E0 		.word	-536707060
 2077 11f0 01000000 		.word	song_is_over
 2078 11f4 008002E0 		.word	-536707072
 2079 11f8 51040000 		.word	current_song+61
 2080 11fc 04C002E0 		.word	-536690684
 2081 1200 10F0FFFF 		.word	-4080
 2082 1204 088002E0 		.word	-536707064
 2083 1208 048002E0 		.word	-536707068
 2084 120c 0C000000 		.word	settings_menu
 2085 1210 00000000 		.word	volume_setting
 2086 1214 24000000 		.word	.LC2
 2087 1218 7D040000 		.word	button_pressed
 2088 121c 00000000 		.word	radio_channel
 2089 1220 32040000 		.word	1074
 2090 1224 75030000 		.word	885
 2091 1228 1C8002E0 		.word	-536707044
 2092 122c 148002E0 		.word	-536707052
 2093 1230 00000000 		.word	radio_enable
 2094 1234 28000000 		.word	.LC3
 2095 1238 2C000000 		.word	.LC4
 2096              	.LFE16:
 2098              		.global	__divsi3
 2099              		.global	__modsi3
 2100              		.align	2
 2101              		.global	main
 2103              	main:
 2104              	.LFB2:
 2105              		.loc 1 79 0
 2106              		@ Function supports interworking.
 2107              		@ args = 0, pretend = 0, frame = 0
 2108              		@ frame_needed = 1, uses_anonymous_args = 0
 2109 123c 0DC0A0E1 		mov	ip, sp
 2110              	.LCFI17:
 2111 1240 F0DD2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 2112              	.LCFI18:
 2113 1244 04B04CE2 		sub	fp, ip, #4
 2114              	.LCFI19:
 2115 1248 08D04DE2 		sub	sp, sp, #8
 2116              	.LCFI20:
 2117              		.loc 1 89 0
 2118 124c FEFFFFEB 		bl	bootUp
 2119              		.loc 1 92 0
 2120 1250 FEFFFFEB 		bl	vs1002Config
 2121              		.loc 1 93 0
 2122 1254 FEFFFFEB 		bl	vs1002Reset
 2123              		.loc 1 94 0
 2124 1258 FEFFFFEB 		bl	vs1002Init
 2125 125c 0040A0E3 		mov	r4, #0
 2126              	.LVL68:
 2127              	.L230:
 2128              	.LBB17:
 2129              		.loc 1 95 0
 2130 1260 3000A0E3 		mov	r0, #48
 2131 1264 FEFFFFEB 		bl	vs1002SetVolume
 2132 1268 013084E2 		add	r3, r4, #1
 2133 126c FF4003E2 		and	r4, r3, #255
 2134 1270 020054E3 		cmp	r4, #2
 2135 1274 9604001A 		bne	.L230
 2136              	.LBE17:
 2137              		.loc 1 96 0
 2138 1278 FEFFFFEB 		bl	vs1002Finish
 2139              		.loc 1 99 0
 2140 127c FEFFFFEB 		bl	LCDInit
 2141              		.loc 1 100 0
 2142 1280 20359FE5 		ldr	r3, .L294
 2143 1284 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2144 1288 FEFFFFEB 		bl	LCDClear
 2145              		.loc 1 101 0
 2146 128c FEFFFFEB 		bl	LCDPrintLogo
 2147              		.loc 1 104 0
 2148 1290 14259FE5 		ldr	r2, .L294+4
 2149 1294 003092E5 		ldr	r3, [r2, #0]
 2150 1298 013283E3 		orr	r3, r3, #268435456
 2151 129c 003082E5 		str	r3, [r2, #0]
 2152              		.loc 1 105 0
 2153 12a0 E10FA0E3 		mov	r0, #900
 2154 12a4 FEFFFFEB 		bl	delay_ms
 2155              		.loc 1 106 0
 2156 12a8 FEFFFFEB 		bl	ns73Config
 2157              		.loc 1 107 0
 2158 12ac FEFFFFEB 		bl	ns73Init
 2159              		.loc 1 108 0
 2160 12b0 F8049FE5 		ldr	r0, .L294+8
 2161 12b4 FEFFFFEB 		bl	ns73SetChannel
 2162              		.loc 1 109 0
 2163 12b8 F4249FE5 		ldr	r2, .L294+12
 2164 12bc 003092E5 		ldr	r3, [r2, #0]
 2165 12c0 013283E3 		orr	r3, r3, #268435456
 2166 12c4 003082E5 		str	r3, [r2, #0]
 2167              		.loc 1 110 0
 2168 12c8 6400A0E3 		mov	r0, #100
 2169 12cc FEFFFFEB 		bl	delay_ms
 2170              		.loc 1 113 0
 2171 12d0 E0249FE5 		ldr	r2, .L294+16
 2172 12d4 003092E5 		ldr	r3, [r2, #0]
 2173 12d8 153C83E3 		orr	r3, r3, #5376
 2174 12dc 003082E5 		str	r3, [r2, #0]
 2175 12e0 0040A0E3 		mov	r4, #0
 2176              	.LVL69:
 2177              	.LVL70:
 2178              	.L232:
 2179              		.loc 1 116 0
 2180 12e4 0000A0E3 		mov	r0, #0
 2181 12e8 FEFFFFEB 		bl	rootDirectory_files_stream
 2182 12ec 000050E3 		cmp	r0, #0
 2183              		.loc 1 115 0
 2184 12f0 015084E2 		add	r5, r4, #1
 2185              		.loc 1 116 0
 2186 12f4 0540A011 		movne	r4, r5
 2187 12f8 B704001A 		bne	.L232
 2188              	.L233:
 2189              		.loc 1 117 0
 2190 12fc 063085E2 		add	r3, r5, #6
 2191 1300 0330C3E3 		bic	r3, r3, #3
 2192 1304 0DD063E0 		rsb	sp, r3, sp
 2193 1308 08A08DE2 		add	sl, sp, #8
 2194              		.loc 1 118 0
 2195 130c 021084E2 		add	r1, r4, #2
 2196 1310 0A00A0E1 		mov	r0, sl
 2197              	.LVL71:
 2198 1314 FEFFFFEB 		bl	rootDirectory_files
 2199              	.LVL72:
 2200              		.loc 1 119 0
 2201 1318 8032A0E1 		mov	r3, r0, asl #5
 2202 131c 043083E2 		add	r3, r3, #4
 2203 1320 0DD063E0 		rsb	sp, r3, sp
 2204              	.LBB18:
 2205              		.loc 1 123 0
 2206 1324 00E0A0E3 		mov	lr, #0
 2207              	.LVL73:
 2208              	.LBE18:
 2209              		.loc 1 119 0
 2210 1328 08808DE2 		add	r8, sp, #8
 2211              		.loc 1 118 0
 2212 132c 88349FE5 		ldr	r3, .L294+20
 2213 1330 0060A0E1 		mov	r6, r0
 2214              	.LBB19:
 2215              		.loc 1 123 0
 2216 1334 0E70A0E1 		mov	r7, lr
 2217              	.LVL74:
 2218 1338 08C0A0E1 		mov	ip, r8
 2219 133c 0E40A0E1 		mov	r4, lr
 2220              	.LVL75:
 2221              	.LBE19:
 2222              		.loc 1 118 0
 2223 1340 000083E5 		str	r0, [r3, #0]
 2224 1344 E40400EA 		b	.L235
 2225              	.LVL76:
 2226              	.L236:
 2227              	.LBB20:
 2228              		.loc 1 123 0
 2229 1348 0020A0E3 		mov	r2, #0
 2230              	.L237:
 2231              	.LBB21:
 2232              		.loc 1 125 0
 2233 134c 050057E1 		cmp	r7, r5
 2234              		.loc 1 133 0
 2235 1350 0030A083 		movhi	r3, #0
 2236 1354 0230CC87 		strhib	r3, [ip, r2]
 2237              		.loc 1 125 0
 2238 1358 DE04008A 		bhi	.L243
 2239              		.loc 1 126 0
 2240 135c 0710DAE7 		ldrb	r1, [sl, r7]	@ zero_extendqisi2
 2241              		.loc 1 127 0
 2242 1360 080084E0 		add	r0, r4, r8
 2243              		.loc 1 126 0
 2244 1364 2C0051E3 		cmp	r1, #44
 2245              		.loc 1 130 0
 2246 1368 0030A0E1 		mov	r3, r0
 2247 136c 0210C317 		strneb	r1, [r3, r2]
 2248              		.loc 1 127 0
 2249 1370 0030A003 		moveq	r3, #0
 2250 1374 0230C007 		streqb	r3, [r0, r2]
 2251              		.loc 1 131 0
 2252 1378 017087E2 		add	r7, r7, #1
 2253              		.loc 1 127 0
 2254 137c 1F20A003 		moveq	r2, #31
 2255              	.L243:
 2256              		.loc 1 124 0
 2257 1380 012082E2 		add	r2, r2, #1
 2258 1384 1F0052E3 		cmp	r2, #31
 2259 1388 D10400DA 		ble	.L237
 2260              	.LBE21:
 2261              		.loc 1 123 0
 2262 138c 01E08EE2 		add	lr, lr, #1
 2263 1390 204084E2 		add	r4, r4, #32
 2264 1394 20C08CE2 		add	ip, ip, #32
 2265              	.LVL77:
 2266              	.L235:
 2267 1398 06005EE1 		cmp	lr, r6
 2268 139c D00400BA 		blt	.L236
 2269              	.LVL78:
 2270              	.LBE20:
 2271              		.loc 1 139 0
 2272 13a0 0F10A0E3 		mov	r1, #15
 2273 13a4 0600A0E1 		mov	r0, r6
 2274 13a8 FEFFFFEB 		bl	__divsi3
 2275              	.LVL79:
 2276 13ac 0C449FE5 		ldr	r4, .L294+24
 2277              	.LVL80:
 2278 13b0 010040E2 		sub	r0, r0, #1
 2279 13b4 FF5000E2 		and	r5, r0, #255
 2280              	.LVL81:
 2281              		.loc 1 140 0
 2282 13b8 0F10A0E3 		mov	r1, #15
 2283 13bc 0600A0E1 		mov	r0, r6
 2284              		.loc 1 139 0
 2285 13c0 0550C4E5 		strb	r5, [r4, #5]
 2286              		.loc 1 140 0
 2287 13c4 FEFFFFEB 		bl	__modsi3
 2288 13c8 000050E3 		cmp	r0, #0
 2289 13cc 01308512 		addne	r3, r5, #1
 2290 13d0 0530C415 		strneb	r3, [r4, #5]
 2291              		.loc 1 143 0
 2292 13d4 E8339FE5 		ldr	r3, .L294+28
 2293 13d8 00C0D3E5 		ldrb	ip, [r3, #0]	@ zero_extendqisi2
 2294              		.loc 1 144 0
 2295 13dc E4339FE5 		ldr	r3, .L294+32
 2296 13e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2297              		.loc 1 142 0
 2298 13e4 0020A0E3 		mov	r2, #0
 2299              		.loc 1 144 0
 2300 13e8 0430C4E5 		strb	r3, [r4, #4]
 2301              		.loc 1 147 0
 2302 13ec 0130A0E3 		mov	r3, #1
 2303              		.loc 1 149 0
 2304 13f0 0400A0E1 		mov	r0, r4
 2305 13f4 0810A0E1 		mov	r1, r8
 2306              		.loc 1 143 0
 2307 13f8 03C0C4E5 		strb	ip, [r4, #3]
 2308              		.loc 1 147 0
 2309 13fc 0030C4E5 		strb	r3, [r4, #0]
 2310              		.loc 1 148 0
 2311 1400 082084E5 		str	r2, [r4, #8]
 2312              		.loc 1 142 0
 2313 1404 0220C4E5 		strb	r2, [r4, #2]
 2314              		.loc 1 146 0
 2315 1408 0620C4E5 		strb	r2, [r4, #6]
 2316              		.loc 1 149 0
 2317 140c FEFFFFEB 		bl	getNewFiles
 2318 1410 B4139FE5 		ldr	r1, .L294+36
 2319 1414 0400A0E1 		mov	r0, r4
 2320              	.L248:
 2321              	.LBB22:
 2322              		.loc 1 150 0
 2323 1418 0120D1E4 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 2324 141c AC339FE5 		ldr	r3, .L294+40
 2325 1420 030051E1 		cmp	r1, r3
 2326 1424 EC21C0E5 		strb	r2, [r0, #492]
 2327 1428 010080E2 		add	r0, r0, #1
 2328 142c 0405001A 		bne	.L248
 2329              	.LBE22:
 2330              		.loc 1 153 0
 2331 1430 9C039FE5 		ldr	r0, .L294+44
 2332 1434 FEFFFFEB 		bl	fillSettings
 2333              		.loc 1 157 0
 2334 1438 78139FE5 		ldr	r1, .L294+16
 2335 143c 003091E5 		ldr	r3, [r1, #0]
 2336              		.loc 1 156 0
 2337 1440 78239FE5 		ldr	r2, .L294+24
 2338 1444 8C439FE5 		ldr	r4, .L294+48
 2339              		.loc 1 157 0
 2340 1448 FF3DC3E3 		bic	r3, r3, #16320
 2341 144c 3030C3E3 		bic	r3, r3, #48
 2342              		.loc 1 158 0
 2343 1450 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 2344              		.loc 1 156 0
 2345 1454 002084E5 		str	r2, [r4, #0]
 2346              		.loc 1 157 0
 2347 1458 003081E5 		str	r3, [r1, #0]
 2348              		.loc 1 158 0
 2349 145c FEFFFFEB 		bl	LCDClear
 2350              		.loc 1 159 0
 2351 1460 000094E5 		ldr	r0, [r4, #0]
 2352 1464 FEFFFFEB 		bl	printMenu
 2353              	.L250:
 2354              		.loc 1 162 0
 2355 1468 6C339FE5 		ldr	r3, .L294+52
 2356 146c 003093E5 		ldr	r3, [r3, #0]
 2357 1470 020513E3 		tst	r3, #8388608
 2358 1474 3005000A 		beq	.L251
 2359              		.loc 1 164 0
 2360 1478 28339FE5 		ldr	r3, .L294
 2361 147c 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2362 1480 FEFFFFEB 		bl	LCDClear
 2363              		.loc 1 165 0
 2364 1484 0430A0E3 		mov	r3, #4
 2365 1488 00308DE5 		str	r3, [sp, #0]
 2366 148c 44339FE5 		ldr	r3, .L294+48
 2367 1490 001093E5 		ldr	r1, [r3, #0]
 2368 1494 2C339FE5 		ldr	r3, .L294+32
 2369 1498 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 2370 149c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2371 14a0 0010A0E3 		mov	r1, #0
 2372 14a4 0730A0E3 		mov	r3, #7
 2373 14a8 30039FE5 		ldr	r0, .L294+56
 2374 14ac 04C08DE5 		str	ip, [sp, #4]
 2375 14b0 FEFFFFEB 		bl	LCDPrintString
 2376              		.loc 1 166 0
 2377 14b4 28339FE5 		ldr	r3, .L294+60
 2378 14b8 3020A0E3 		mov	r2, #48
 2379 14bc 002083E5 		str	r2, [r3, #0]
 2380              		.loc 1 167 0
 2381 14c0 FEFFFFEB 		bl	main_msc
 2382              		.loc 1 168 0
 2383 14c4 FEFFFFEB 		bl	reset
 2384              	.L251:
 2385              		.loc 1 173 0
 2386 14c8 18339FE5 		ldr	r3, .L294+64
 2387 14cc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2388 14d0 000053E3 		cmp	r3, #0
 2389 14d4 7805001A 		bne	.L253
 2390 14d8 0C339FE5 		ldr	r3, .L294+68
 2391 14dc 0040D3E5 		ldrb	r4, [r3, #0]	@ zero_extendqisi2
 2392 14e0 000054E3 		cmp	r4, #0
 2393 14e4 7805001A 		bne	.L253
 2394              		.loc 1 175 0
 2395 14e8 00339FE5 		ldr	r3, .L294+72
 2396 14ec 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2397 14f0 000053E3 		cmp	r3, #0
 2398 14f4 7805000A 		beq	.L253
 2399              		.loc 1 176 0
 2400 14f8 E4329FE5 		ldr	r3, .L294+60
 2401 14fc 2020A0E3 		mov	r2, #32
 2402 1500 002083E5 		str	r2, [r3, #0]
 2403              		.loc 1 177 0
 2404 1504 E8029FE5 		ldr	r0, .L294+76
 2405 1508 FEFFFFEB 		bl	closeSong
 2406              		.loc 1 181 0
 2407 150c ACC29FE5 		ldr	ip, .L294+24
 2408              		.loc 1 179 0
 2409 1510 E0329FE5 		ldr	r3, .L294+80
 2410              		.loc 1 181 0
 2411 1514 0010DCE5 		ldrb	r1, [ip, #0]	@ zero_extendqisi2
 2412              		.loc 1 179 0
 2413 1518 0222A0E3 		mov	r2, #536870912
 2414 151c 002083E5 		str	r2, [r3, #0]
 2415              		.loc 1 178 0
 2416 1520 D4329FE5 		ldr	r3, .L294+84
 2417              		.loc 1 181 0
 2418 1524 0E0051E3 		cmp	r1, #14
 2419              		.loc 1 178 0
 2420 1528 0040C3E5 		strb	r4, [r3, #0]
 2421              		.loc 1 182 0
 2422 152c 01208192 		addls	r2, r1, #1
 2423              		.loc 1 183 0
 2424 1530 08309C95 		ldrls	r3, [ip, #8]
 2425              		.loc 1 182 0
 2426 1534 0020CC95 		strlsb	r2, [ip, #0]
 2427              		.loc 1 183 0
 2428 1538 01308392 		addls	r3, r3, #1
 2429 153c 08308C95 		strls	r3, [ip, #8]
 2430              		.loc 1 186 0
 2431 1540 0030DCE5 		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 2432 1544 0F0053E3 		cmp	r3, #15
 2433 1548 5D05001A 		bne	.L259
 2434 154c 0620DCE5 		ldrb	r2, [ip, #6]	@ zero_extendqisi2
 2435 1550 0530DCE5 		ldrb	r3, [ip, #5]	@ zero_extendqisi2
 2436 1554 030052E1 		cmp	r2, r3
 2437 1558 5D05002A 		bcs	.L259
 2438              		.loc 1 189 0
 2439 155c 012082E2 		add	r2, r2, #1
 2440              		.loc 1 187 0
 2441 1560 0130A0E3 		mov	r3, #1
 2442              		.loc 1 190 0
 2443 1564 0C00A0E1 		mov	r0, ip
 2444 1568 0810A0E1 		mov	r1, r8
 2445              		.loc 1 187 0
 2446 156c 0030CCE5 		strb	r3, [ip, #0]
 2447              		.loc 1 188 0
 2448 1570 08408CE5 		str	r4, [ip, #8]
 2449              		.loc 1 189 0
 2450 1574 0620CCE5 		strb	r2, [ip, #6]
 2451              		.loc 1 190 0
 2452 1578 FEFFFFEB 		bl	getNewFiles
 2453              	.L259:
 2454              		.loc 1 193 0
 2455 157c 3C429FE5 		ldr	r4, .L294+24
 2456 1580 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 2457 1584 833284E0 		add	r3, r4, r3, asl #5
 2458 1588 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2459 158c 000053E3 		cmp	r3, #0
 2460 1590 7805000A 		beq	.L253
 2461              		.loc 1 194 0
 2462 1594 0400D4E5 		ldrb	r0, [r4, #4]	@ zero_extendqisi2
 2463 1598 FEFFFFEB 		bl	LCDClear
 2464              		.loc 1 195 0
 2465 159c 0400A0E1 		mov	r0, r4
 2466 15a0 FEFFFFEB 		bl	printMenu
 2467              		.loc 1 196 0
 2468 15a4 0410A0E1 		mov	r1, r4
 2469 15a8 44029FE5 		ldr	r0, .L294+76
 2470 15ac FEFFFFEB 		bl	loadSongInfo
 2471 15b0 44329FE5 		ldr	r3, .L294+84
 2472 15b4 0000C3E5 		strb	r0, [r3, #0]
 2473              		.loc 1 197 0
 2474 15b8 FEFFFFEB 		bl	vs1002Config
 2475              		.loc 1 198 0
 2476 15bc 0000A0E3 		mov	r0, #0
 2477 15c0 021BA0E3 		mov	r1, #2048
 2478 15c4 FEFFFFEB 		bl	vs1002SCIWrite
 2479              		.loc 1 199 0
 2480 15c8 FEFFFFEB 		bl	vs1002Finish
 2481              		.loc 1 200 0
 2482 15cc 2C329FE5 		ldr	r3, .L294+88
 2483 15d0 0222A0E3 		mov	r2, #536870912
 2484 15d4 002083E5 		str	r2, [r3, #0]
 2485              		.loc 1 201 0
 2486 15d8 24229FE5 		ldr	r2, .L294+92
 2487 15dc 003092E5 		ldr	r3, [r2, #0]
 2488 15e0 203083E3 		orr	r3, r3, #32
 2489 15e4 003082E5 		str	r3, [r2, #0]
 2490              	.L253:
 2491              		.loc 1 206 0
 2492 15e8 F8319FE5 		ldr	r3, .L294+64
 2493 15ec 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2494 15f0 020053E3 		cmp	r3, #2
 2495 15f4 8105001A 		bne	.L263
 2496 15f8 D8319FE5 		ldr	r3, .L294+48
 2497 15fc 0810A0E1 		mov	r1, r8
 2498 1600 000093E5 		ldr	r0, [r3, #0]
 2499 1604 FEFFFFEB 		bl	handleUpButton
 2500 1608 E00500EA 		b	.L265
 2501              	.L263:
 2502              		.loc 1 207 0
 2503 160c 010053E3 		cmp	r3, #1
 2504 1610 8805001A 		bne	.L266
 2505 1614 BC319FE5 		ldr	r3, .L294+48
 2506 1618 0810A0E1 		mov	r1, r8
 2507 161c 000093E5 		ldr	r0, [r3, #0]
 2508 1620 FEFFFFEB 		bl	handleDownButton
 2509 1624 E00500EA 		b	.L265
 2510              	.L266:
 2511              		.loc 1 208 0
 2512 1628 030053E3 		cmp	r3, #3
 2513 162c 8C05001A 		bne	.L268
 2514 1630 FEFFFFEB 		bl	handleMiddleButton
 2515 1634 E00500EA 		b	.L265
 2516              	.L268:
 2517              		.loc 1 210 0
 2518 1638 AC319FE5 		ldr	r3, .L294+68
 2519 163c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2520 1640 000053E3 		cmp	r3, #0
 2521 1644 E005000A 		beq	.L265
 2522              		.loc 1 211 0
 2523 1648 94319FE5 		ldr	r3, .L294+60
 2524 164c 1020A0E3 		mov	r2, #16
 2525              		.loc 1 212 0
 2526 1650 4B0FA0E3 		mov	r0, #300
 2527              		.loc 1 211 0
 2528 1654 002083E5 		str	r2, [r3, #0]
 2529              		.loc 1 212 0
 2530 1658 FEFFFFEB 		bl	delay_ms
 2531              		.loc 1 213 0
 2532 165c FEFFFFEB 		bl	MMA_get_y
 2533 1660 AF0F50E3 		cmp	r0, #700
 2534 1664 B50500DA 		ble	.L271
 2535 1668 98319FE5 		ldr	r3, .L294+96
 2536 166c 003093E5 		ldr	r3, [r3, #0]
 2537 1670 AF0F53E3 		cmp	r3, #700
 2538 1674 B50500DA 		ble	.L271
 2539              		.loc 1 214 0
 2540 1678 7C319FE5 		ldr	r3, .L294+84
 2541 167c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2542 1680 000053E3 		cmp	r3, #0
 2543 1684 4C019FE5 		ldr	r0, .L294+48
 2544 1688 A405000A 		beq	.L274
 2545 168c 000090E5 		ldr	r0, [r0, #0]
 2546 1690 FEFFFFEB 		bl	quickClear
 2547 1694 A70500EA 		b	.L276
 2548              	.L274:
 2549              		.loc 1 215 0
 2550 1698 003090E5 		ldr	r3, [r0, #0]
 2551 169c 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2552 16a0 FEFFFFEB 		bl	LCDClear
 2553              	.L276:
 2554              		.loc 1 219 0
 2555 16a4 50319FE5 		ldr	r3, .L294+84
 2556 16a8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2557              		.loc 1 216 0
 2558 16ac 20119FE5 		ldr	r1, .L294+44
 2559              		.loc 1 219 0
 2560 16b0 000053E3 		cmp	r3, #0
 2561              		.loc 1 217 0
 2562 16b4 0130A0E3 		mov	r3, #1
 2563 16b8 0230C1E5 		strb	r3, [r1, #2]
 2564              		.loc 1 218 0
 2565 16bc 34319FE5 		ldr	r3, .L294+80
 2566 16c0 0222A0E3 		mov	r2, #536870912
 2567 16c4 002083E5 		str	r2, [r3, #0]
 2568              		.loc 1 216 0
 2569 16c8 08319FE5 		ldr	r3, .L294+48
 2570              		.loc 1 219 0
 2571 16cc 0F228212 		addne	r2, r2, #-268435456
 2572              		.loc 1 220 0
 2573 16d0 0121A003 		moveq	r2, #1073741824
 2574              		.loc 1 216 0
 2575 16d4 001083E5 		str	r1, [r3, #0]
 2576 16d8 D70500EA 		b	.L293
 2577              	.L271:
 2578              		.loc 1 222 0
 2579 16dc FEFFFFEB 		bl	MMA_get_y
 2580 16e0 24219FE5 		ldr	r2, .L294+100
 2581 16e4 020050E1 		cmp	r0, r2
 2582 16e8 D90500CA 		bgt	.L279
 2583 16ec 14319FE5 		ldr	r3, .L294+96
 2584 16f0 003093E5 		ldr	r3, [r3, #0]
 2585 16f4 020053E1 		cmp	r3, r2
 2586 16f8 D90500CA 		bgt	.L279
 2587              		.loc 1 223 0
 2588 16fc F8309FE5 		ldr	r3, .L294+84
 2589 1700 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2590 1704 000053E3 		cmp	r3, #0
 2591 1708 C8009FE5 		ldr	r0, .L294+48
 2592 170c C505000A 		beq	.L282
 2593 1710 000090E5 		ldr	r0, [r0, #0]
 2594 1714 FEFFFFEB 		bl	quickClear
 2595 1718 C80500EA 		b	.L284
 2596              	.L282:
 2597              		.loc 1 224 0
 2598 171c 003090E5 		ldr	r3, [r0, #0]
 2599 1720 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2600 1724 FEFFFFEB 		bl	LCDClear
 2601              	.L284:
 2602              		.loc 1 229 0
 2603 1728 CC309FE5 		ldr	r3, .L294+84
 2604 172c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2605              		.loc 1 225 0
 2606 1730 88109FE5 		ldr	r1, .L294+24
 2607              		.loc 1 227 0
 2608 1734 BC209FE5 		ldr	r2, .L294+80
 2609              		.loc 1 229 0
 2610 1738 000053E3 		cmp	r3, #0
 2611              		.loc 1 226 0
 2612 173c 0030A0E3 		mov	r3, #0
 2613 1740 0230C1E5 		strb	r3, [r1, #2]
 2614              		.loc 1 227 0
 2615 1744 013283E2 		add	r3, r3, #268435456
 2616 1748 003082E5 		str	r3, [r2, #0]
 2617              		.loc 1 228 0
 2618 174c 033283E2 		add	r3, r3, #805306368
 2619 1750 003082E5 		str	r3, [r2, #0]
 2620              		.loc 1 225 0
 2621 1754 7C309FE5 		ldr	r3, .L294+48
 2622 1758 001083E5 		str	r1, [r3, #0]
 2623              		.loc 1 229 0
 2624 175c D905000A 		beq	.L279
 2625 1760 0222A0E3 		mov	r2, #536870912
 2626              	.L293:
 2627 1764 94309FE5 		ldr	r3, .L294+88
 2628 1768 002083E5 		str	r2, [r3, #0]
 2629              	.L279:
 2630              		.loc 1 231 0
 2631 176c 64309FE5 		ldr	r3, .L294+48
 2632 1770 000093E5 		ldr	r0, [r3, #0]
 2633 1774 FEFFFFEB 		bl	printMenu
 2634              		.loc 1 232 0
 2635 1778 84209FE5 		ldr	r2, .L294+92
 2636 177c 003092E5 		ldr	r3, [r2, #0]
 2637 1780 103083E3 		orr	r3, r3, #16
 2638 1784 003082E5 		str	r3, [r2, #0]
 2639              	.L265:
 2640              		.loc 1 235 0
 2641 1788 74009FE5 		ldr	r0, .L294+92
 2642 178c 002090E5 		ldr	r2, [r0, #0]
 2643              		.loc 1 234 0
 2644 1790 50309FE5 		ldr	r3, .L294+64
 2645              		.loc 1 235 0
 2646 1794 102082E3 		orr	r2, r2, #16
 2647              		.loc 1 234 0
 2648 1798 0010A0E3 		mov	r1, #0
 2649 179c 0010C3E5 		strb	r1, [r3, #0]
 2650              		.loc 1 235 0
 2651 17a0 002080E5 		str	r2, [r0, #0]
 2652 17a4 180500EA 		b	.L250
 2653              	.L295:
 2654              		.align	2
 2655              	.L294:
 2656 17a8 00000000 		.word	white
 2657 17ac 1C8002E0 		.word	-536707044
 2658 17b0 CD030000 		.word	973
 2659 17b4 148002E0 		.word	-536707052
 2660 17b8 00C002E0 		.word	-536690688
 2661 17bc 04000000 		.word	NUMBEROFFILES
 2662 17c0 10020000 		.word	file_manager
 2663 17c4 00000000 		.word	green
 2664 17c8 00000000 		.word	black
 2665 17cc 00000000 		.word	welcome
 2666 17d0 16000000 		.word	welcome+22
 2667 17d4 0C000000 		.word	settings_menu
 2668 17d8 08000000 		.word	current_display
 2669 17dc 008002E0 		.word	-536707072
 2670 17e0 00000000 		.word	USB
 2671 17e4 14F0FFFF 		.word	-4076
 2672 17e8 7D040000 		.word	button_pressed
 2673 17ec 7C040000 		.word	update_screen
 2674 17f0 01000000 		.word	song_is_over
 2675 17f4 14040000 		.word	current_song
 2676 17f8 048002E0 		.word	-536707068
 2677 17fc 02000000 		.word	file_is_open
 2678 1800 0C8002E0 		.word	-536707060
 2679 1804 10F0FFFF 		.word	-4080
 2680 1808 78040000 		.word	prev_position
 2681 180c BB020000 		.word	699
 2682              	.LFE2:
 2684              		.bss
 2685              		.align	2
 2686              	current_display:
 2687 0008 00000000 		.space	4
 2688              		.align	2
 2689              	settings_menu:
 2690 000c 00000000 		.space	516
 2690      00000000 
 2690      00000000 
 2690      00000000 
 2690      00000000 
 2691              		.align	2
 2692              	file_manager:
 2693 0210 00000000 		.space	516
 2693      00000000 
 2693      00000000 
 2693      00000000 
 2693      00000000 
 2694              		.align	2
 2695              	current_song:
 2696 0414 00000000 		.space	96
 2696      00000000 
 2696      00000000 
 2696      00000000 
 2696      00000000 
 2697              		.align	2
 2698              	cur_position:
 2699 0474 00000000 		.space	4
 2700              		.align	2
 2701              	prev_position:
 2702 0478 00000000 		.space	4
 2703              	update_screen:
 2704 047c 00       		.space	1
 2705              	button_pressed:
 2706 047d 00       		.space	1
 3041              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccOdLSXd.s:15     .rodata:0000000000000000 settings
     /tmp/ccOdLSXd.s:21     .rodata:000000000000000c radio_channel_menu
     /tmp/ccOdLSXd.s:27     .rodata:000000000000001c radio_power
     /tmp/ccOdLSXd.s:33     .rodata:0000000000000028 contrast
     /tmp/ccOdLSXd.s:39     .rodata:0000000000000034 volume
     /tmp/ccOdLSXd.s:45     .rodata:0000000000000040 newline
     /tmp/ccOdLSXd.s:51     .rodata:0000000000000044 USB
     /tmp/ccOdLSXd.s:57     .rodata:0000000000000054 NotFound
     /tmp/ccOdLSXd.s:63     .rodata:0000000000000064 welcome
     /tmp/ccOdLSXd.s:69     .bss:0000000000000000 radio_enable
                             .bss:0000000000000000 $d
     /tmp/ccOdLSXd.s:76     .data:0000000000000000 radio_channel
     /tmp/ccOdLSXd.s:77     .data:0000000000000000 $d
     /tmp/ccOdLSXd.s:82     .data:0000000000000004 volume_setting
     /tmp/ccOdLSXd.s:85     .bss:0000000000000001 song_is_over
     /tmp/ccOdLSXd.s:87     .bss:0000000000000002 file_is_open
     /tmp/ccOdLSXd.s:90     .bss:0000000000000004 NUMBEROFFILES
     /tmp/ccOdLSXd.s:96     .text:0000000000000000 delay_ms
     /tmp/ccOdLSXd.s:106    .text:0000000000000000 $a
     /tmp/ccOdLSXd.s:127    .text:0000000000000024 $d
     /tmp/ccOdLSXd.s:133    .text:0000000000000028 getNewFiles
     /tmp/ccOdLSXd.s:140    .text:0000000000000028 $a
     /tmp/ccOdLSXd.s:255    .text:0000000000000114 $d
     /tmp/ccOdLSXd.s:261    .text:0000000000000118 fillSettings
     /tmp/ccOdLSXd.s:268    .text:0000000000000118 $a
     /tmp/ccOdLSXd.s:351    .text:00000000000001c0 $d
     /tmp/ccOdLSXd.s:363    .text:00000000000001dc reset
     /tmp/ccOdLSXd.s:372    .text:00000000000001dc $a
     /tmp/ccOdLSXd.s:408    .text:0000000000000210 bootUp
     /tmp/ccOdLSXd.s:590    .text:00000000000003fc $d
     /tmp/ccOdLSXd.s:615    .text:0000000000000450 timer1ISR
     /tmp/ccOdLSXd.s:716    .text:0000000000000518 timer0ISR
     /tmp/ccOdLSXd.s:622    .text:0000000000000450 $a
     /tmp/ccOdLSXd.s:668    .text:00000000000004c4 $d
     /tmp/ccOdLSXd.s:2695   .bss:0000000000000414 current_song
     /tmp/ccOdLSXd.s:679    .text:00000000000004dc getButton
     /tmp/ccOdLSXd.s:688    .text:00000000000004dc $a
     /tmp/ccOdLSXd.s:711    .text:0000000000000514 $d
     /tmp/ccOdLSXd.s:723    .text:0000000000000518 $a
     /tmp/ccOdLSXd.s:777    .text:00000000000005a0 $d
     /tmp/ccOdLSXd.s:2705   .bss:000000000000047d button_pressed
     /tmp/ccOdLSXd.s:2701   .bss:0000000000000478 prev_position
     /tmp/ccOdLSXd.s:2698   .bss:0000000000000474 cur_position
     /tmp/ccOdLSXd.s:2703   .bss:000000000000047c update_screen
     /tmp/ccOdLSXd.s:789    .text:00000000000005bc loadSongInfo
     /tmp/ccOdLSXd.s:796    .text:00000000000005bc $a
     /tmp/ccOdLSXd.s:889    .text:0000000000000694 $d
     /tmp/ccOdLSXd.s:895    .text:0000000000000698 closeSong
     /tmp/ccOdLSXd.s:902    .text:0000000000000698 $a
     /tmp/ccOdLSXd.s:924    .text:00000000000006cc $d
     /tmp/ccOdLSXd.s:930    .text:00000000000006d0 quickClear
     /tmp/ccOdLSXd.s:937    .text:00000000000006d0 $a
     /tmp/ccOdLSXd.s:1016   .text:0000000000000794 $d
     /tmp/ccOdLSXd.s:1024   .text:00000000000007a0 printMenu
     /tmp/ccOdLSXd.s:1031   .text:00000000000007a0 $a
     /tmp/ccOdLSXd.s:1107   .text:000000000000086c $d
     /tmp/ccOdLSXd.s:1113   .text:0000000000000870 highlightRow
     /tmp/ccOdLSXd.s:1120   .text:0000000000000870 $a
     /tmp/ccOdLSXd.s:1202   .text:0000000000000950 $d
     /tmp/ccOdLSXd.s:1208   .text:0000000000000954 handleDownButton
     /tmp/ccOdLSXd.s:1215   .text:0000000000000954 $a
     /tmp/ccOdLSXd.s:1275   .text:00000000000009cc $d
     /tmp/ccOdLSXd.s:2692   .bss:0000000000000210 file_manager
     /tmp/ccOdLSXd.s:1281   .text:00000000000009d0 handleUpButton
     /tmp/ccOdLSXd.s:1288   .text:00000000000009d0 $a
     /tmp/ccOdLSXd.s:1346   .text:0000000000000a40 $d
     /tmp/ccOdLSXd.s:1363   .text:0000000000000a44 handleMiddleButton
     /tmp/ccOdLSXd.s:1370   .text:0000000000000a44 $a
     /tmp/ccOdLSXd.s:2068   .text:00000000000011cc $d
     /tmp/ccOdLSXd.s:2686   .bss:0000000000000008 current_display
     /tmp/ccOdLSXd.s:2689   .bss:000000000000000c settings_menu
     /tmp/ccOdLSXd.s:2103   .text:000000000000123c main
     /tmp/ccOdLSXd.s:2109   .text:000000000000123c $a
     /tmp/ccOdLSXd.s:2656   .text:00000000000017a8 $d

UNDEFINED SYMBOLS
white
black
rprintf_devopen
sd_raw_init
rprintf
openroot
putc_serial0
vs1002Config
vs1002SendMusic
fat16_read_file
vs1002Finish
MMA_get_y
root_file_exists
root_open
fat16_file_size
fat16_close_file
LCDPrintString
LCDSetRowColor
LCDClear
vs1002SCIWrite
vs1002SetVolume
ns73SetChannel
ns73Config
ns73Send
__divsi3
__modsi3
vs1002Reset
vs1002Init
LCDInit
LCDPrintLogo
ns73Init
rootDirectory_files_stream
rootDirectory_files
main_msc
green
